{"version":3,"file":"917.bundle.82b9fb17f429d65fc8a2.js","mappings":"mJAEMA,E,mDAAKC,GACLC,EAAqB,GAAEF,sC,eCA7B,MAAMG,EAAiB,CACrBC,gCAAiC,mCACjCC,iCAAkC,mCAClCC,+BAAgC,mCAEhCC,gCAAiC,4BACjCC,sDACE,+BAGEC,EAAeC,OAAOC,OAAOR,GAC7BS,EAA+B,CACnCT,EAAeI,gCACfJ,EAAeK,uDAaXK,EAA8BH,OAAOC,OAVT,CAChCG,2BAA4B,0BAC5BC,yCAA0C,0BAC1CC,wCAAyC,0BACzCC,wCAAyC,0BACzCC,kCAAmC,0BACnCC,sBAAuB,0BACvBC,yBAA0B,4B,oOCtB5B,MAAMC,EAAYC,EAAAA,MAAW,IACpB,iCAKHC,EAA+BC,GAEjCF,EAAAA,cAACA,EAAAA,SAAc,CAACG,SAAUH,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACD,EAAcG,IA+DrB,QAvD4B,CAI1BxB,GAAE,EAQF0B,kBAAiBC,GAAwC,IAAvC,gBAAEC,EAAe,iBAAEC,GAAkBF,EAWrD,MAAO,CACL,CAAEG,KAAM,cAAeC,UAXoBP,GAEzCF,EAAAA,cAACC,EAA4BS,EAAA,CAC3BJ,gBAAiBA,EACjBC,iBAAkBA,GACdL,KAQZ,EAcAS,yBDgDa,SAAiCN,GAG7C,IAH8C,gBAC/CC,EAAe,iBACfC,GACDF,EASC,MAAO,CACL,CACEG,KAAM,cACNrB,eACAyB,yBAZ6BC,GAlFDC,EAChCD,EACAP,EACAC,KAEA,MAAMQ,EAAaR,EAAiBS,sBAAsB,GAC1D,OAAOH,EACJI,QAAOC,IACN,MAAMC,EACJD,EAASE,4BACTF,EAASG,mBACTH,EAAS,YAEX,QAAI3B,EAA4B+B,SAASH,IAKvCD,EAASK,cAAgB1C,EAAeE,kCAQxCO,EAA6BgC,SAASJ,EAASK,cAC/CL,EAASM,gBAAkB,EAAE,IAGhCC,KAAIC,IACH,MAAM,SACJC,EAAQ,eACRC,EAAc,kBACdC,EAAoB,SAClBH,GACE,aACJI,EAAY,WACZC,EAAU,kBACVC,EAAiB,iBACjBC,EAAgB,eAChBT,GACEE,EAgCJ,MA/BmB,CAEjBC,WACAO,sBAAuBC,EAAAA,MAAMC,OAC7BP,oBACAC,eACAC,aACAH,iBACAI,oBACAC,mBACArD,kBAAiB,EACjByD,iBAAkB,KAClBC,aAAc,KACdC,SAAUxB,EAAWyB,SAASC,UAAU,CACtCf,WACAgB,WAAY,QACZC,IAAK,cAEP9B,UAAW,CAACa,GACZkB,aAAc7B,EAAWyB,SAASC,UAAU,CAC1Cf,WACAmB,YAAa,aACbC,YAAa,aACbH,IAAK,WAEPI,qBAAqB,EACrBC,UAAU,EACV7D,eACA8D,eAAgBzB,EAChBE,WAEe,GACjB,EAQKZ,CACLD,EACAP,EACAC,IAWN,E","sources":["webpack:///../../../extensions/dicom-video/src/id.js","webpack:///../../../extensions/dicom-video/src/getSopClassHandlerModule.js","webpack:///../../../extensions/dicom-video/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-video`;\n\nexport { SOPClassHandlerId, id };\n","import { SOPClassHandlerId } from './id';\nimport { utils } from '@ohif/core';\n\nconst SOP_CLASS_UIDS = {\n  VIDEO_MICROSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.2.1',\n  VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.4.1',\n  VIDEO_ENDOSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.1.1',\n  /** Need to use fallback, could be video or image */\n  SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7',\n  MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE:\n    '1.2.840.10008.5.1.4.1.1.7.4',\n};\n\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\nconst secondaryCaptureSopClassUids = [\n  SOP_CLASS_UIDS.SECONDARY_CAPTURE_IMAGE_STORAGE,\n  SOP_CLASS_UIDS.MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE,\n];\n\nconst SupportedTransferSyntaxes = {\n  MPEG4_AVC_264_HIGH_PROFILE: '1.2.840.10008.1.2.4.102',\n  MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE: '1.2.840.10008.1.2.4.103',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO: '1.2.840.10008.1.2.4.104',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO: '1.2.840.10008.1.2.4.105',\n  MPEG4_AVC_264_STEREO_HIGH_PROFILE: '1.2.840.10008.1.2.4.106',\n  HEVC_265_MAIN_PROFILE: '1.2.840.10008.1.2.4.107',\n  HEVC_265_MAIN_10_PROFILE: '1.2.840.10008.1.2.4.108',\n};\n\nconst supportedTransferSyntaxUIDs = Object.values(SupportedTransferSyntaxes);\n\nconst _getDisplaySetsFromSeries = (\n  instances,\n  servicesManager,\n  extensionManager\n) => {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  return instances\n    .filter(metadata => {\n      const tsuid =\n        metadata.AvailableTransferSyntaxUID ||\n        metadata.TransferSyntaxUID ||\n        metadata['00083002'];\n\n      if (supportedTransferSyntaxUIDs.includes(tsuid)) {\n        return true;\n      }\n\n      if (\n        metadata.SOPClassUID === SOP_CLASS_UIDS.VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE\n      ) {\n        return true;\n      }\n\n      // Assume that an instance with one of the secondary capture SOPClassUIDs and\n      // with at least 90 frames (i.e. typically 3 seconds of video) is indeed a video.\n      return (\n        secondaryCaptureSopClassUids.includes(metadata.SOPClassUID) &&\n        metadata.NumberOfFrames >= 90\n      );\n    })\n    .map(instance => {\n      const {\n        Modality,\n        SOPInstanceUID,\n        SeriesDescription = 'VIDEO',\n      } = instance;\n      const {\n        SeriesNumber,\n        SeriesDate,\n        SeriesInstanceUID,\n        StudyInstanceUID,\n        NumberOfFrames,\n      } = instance;\n      const displaySet = {\n        //plugin: id,\n        Modality,\n        displaySetInstanceUID: utils.guid(),\n        SeriesDescription,\n        SeriesNumber,\n        SeriesDate,\n        SOPInstanceUID,\n        SeriesInstanceUID,\n        StudyInstanceUID,\n        SOPClassHandlerId,\n        referencedImages: null,\n        measurements: null,\n        videoUrl: dataSource.retrieve.directURL({\n          instance,\n          singlepart: 'video',\n          tag: 'PixelData',\n        }),\n        instances: [instance],\n        thumbnailSrc: dataSource.retrieve.directURL({\n          instance,\n          defaultPath: '/thumbnail',\n          defaultType: 'image/jpeg',\n          tag: 'Absent',\n        }),\n        isDerivedDisplaySet: true,\n        isLoaded: false,\n        sopClassUids,\n        numImageFrames: NumberOfFrames,\n        instance,\n      };\n      return displaySet;\n    });\n};\n\nexport default function getSopClassHandlerModule({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return [\n    {\n      name: 'dicom-video',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { id } from './id';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstoneVideoViewport'\n  );\n});\n\nconst OHIFCornerstoneVideoViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomVideoExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneVideoViewport = props => {\n      return (\n        <OHIFCornerstoneVideoViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      { name: 'dicom-video', component: ExtendedOHIFCornerstoneVideoViewport },\n    ];\n  },\n  // getCommandsModule({ servicesManager }) {\n  //   return {\n  //     definitions: {\n  //       setToolActive: {\n  //         commandFn: ({ toolName, element }) => {\n  //         },\n  //         storeContexts: [],\n  //         options: {},\n  //       },\n  //     },\n  //     defaultContext: 'ACTIVE_VIEWPORT::VIDEO',\n  //   };\n  // },\n  getSopClassHandlerModule,\n};\n\nfunction _getToolAlias(toolName) {\n  let toolAlias = toolName;\n\n  switch (toolName) {\n    case 'EllipticalRoi':\n      toolAlias = 'SREllipticalRoi';\n      break;\n  }\n\n  return toolAlias;\n}\n\nexport default dicomVideoExtension;\n"],"names":["id","packageJson","SOPClassHandlerId","SOP_CLASS_UIDS","VIDEO_MICROSCOPIC_IMAGE_STORAGE","VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE","VIDEO_ENDOSCOPIC_IMAGE_STORAGE","SECONDARY_CAPTURE_IMAGE_STORAGE","MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE","sopClassUids","Object","values","secondaryCaptureSopClassUids","supportedTransferSyntaxUIDs","MPEG4_AVC_264_HIGH_PROFILE","MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE","MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO","MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO","MPEG4_AVC_264_STEREO_HIGH_PROFILE","HEVC_265_MAIN_PROFILE","HEVC_265_MAIN_10_PROFILE","Component","React","OHIFCornerstoneVideoViewport","props","fallback","getViewportModule","_ref","servicesManager","extensionManager","name","component","_extends","getSopClassHandlerModule","getDisplaySetsFromSeries","instances","_getDisplaySetsFromSeries","dataSource","getActiveDataSource","filter","metadata","tsuid","AvailableTransferSyntaxUID","TransferSyntaxUID","includes","SOPClassUID","NumberOfFrames","map","instance","Modality","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SeriesInstanceUID","StudyInstanceUID","displaySetInstanceUID","utils","guid","referencedImages","measurements","videoUrl","retrieve","directURL","singlepart","tag","thumbnailSrc","defaultPath","defaultType","isDerivedDisplaySet","isLoaded","numImageFrames"],"sourceRoot":""}