{"version":3,"file":"935.bundle.d0f4d7f26365c2ca1943.js","mappings":"gGAAA,SAASA,EAAQC,GAGf,OAAOD,EAAU,mBAAqBE,QAAU,iBAAmBA,OAAOC,SAAW,SAAUF,GAC7F,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAO,mBAAqBC,QAAUD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,CAC1H,EAAGD,EAAQC,EACb,CAMA,SAASK,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,GAqBFU,EArByBN,EAAWO,IAsBtDA,SACkB,iBADlBA,EAXN,SAAsBC,EAAOC,GAC3B,GAAqB,iBAAVD,GAAgC,OAAVA,EAAgB,OAAOA,EACxD,IAAIE,EAAOF,EAAMjB,OAAOoB,aACxB,QAAaC,IAATF,EAAoB,CACtB,IAAIG,EAAMH,EAAKI,KAAKN,EAAOC,GAAQ,WACnC,GAAmB,iBAARI,EAAkB,OAAOA,EACpC,MAAM,IAAIE,UAAU,+CACtB,CACA,OAAiB,WAATN,EAAoBO,OAASC,QAAQT,EAC/C,CAEYU,CAAaZ,EAAK,WACKC,EAAMS,OAAOT,IAvBkBP,EAChE,CAoBF,IAAwBM,EAClBC,CApBN,CAiDA,SAASY,EAAmBC,GAE1B,IADA,IAAIC,EAAM,IAAIC,WAAWF,EAAIrB,QACpBD,EAAI,EAAGyB,EAAIH,EAAIrB,OAAQD,EAAIyB,EAAGzB,IACrCuB,EAAIvB,GAAKsB,EAAII,WAAW1B,GAE1B,OAAOuB,CACT,CAwBA,SAASI,EAAcC,EAASC,GAC9B,IAAIC,EAASC,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,EACjF,GAAID,EAASD,EAAM5B,OAAS2B,EAAQ3B,OAClC,OAAO,EAGT,IADA,IAAI+B,EAAQF,EACH9B,EAAI,EAAGA,EAAI6B,EAAM5B,OAAQD,IAAK,CACrC,GAAI6B,EAAM7B,KAAO4B,EAAQI,GACvB,OAAO,EAETA,GAAS,CACX,CACA,OAAO,CACT,CASA,SAASC,EAAUL,EAASC,GAC1B,IAAIC,EAASC,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,EAC7EG,EAAkBH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxDqB,EAAeP,EAAQ3B,OACvBiC,IACFC,EAAeC,KAAKC,IAAIP,EAASI,EAAiBN,EAAQ3B,SAE5D,IAAK,IAAID,EAAI8B,EAAQ9B,EAAImC,EAAcnC,IAIrC,GAAI4B,EAAQ5B,KAAO6B,EAAM,IACnBF,EAAcC,EAASC,EAAO7B,GAChC,OAAOA,EAIb,OAAQ,CACV,CAiCA,SAASsC,EAAgBC,GACvB,IAAIC,EAAWT,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GA3BhF,WACE,SAASU,IACP,OAAOL,KAAKM,MAA4B,OAArB,EAAIN,KAAKO,WAAqBC,SAAS,IAAIC,UAAU,EAC1E,CACA,MAAO,GAAGC,OAAOL,IAAOA,IAAM,KAAKK,OAAOL,IAAM,KAAKK,OAAOL,IAAM,KAAKK,OAAOL,IAAM,KAAKK,OAAOL,KAAMK,OAAOL,KAAMK,OAAOL,IAC5H,CAsBqFM,GAE/EC,EAAoB,iBAAiBF,OADvBf,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,qBAElFkB,EAAS,SAASH,OAAON,EAAU,QAAQM,OAAOE,EAAmB,YACrEE,EAAS,SAASJ,OAAON,EAAU,MACnCW,EAAc9B,EAAmB4B,GACjCG,EAAc/B,EAAmB6B,GACjCG,EAAeF,EAAYlD,OAC3BqD,EAAeF,EAAYnD,OAC3BA,EAAS,EAGTsD,EAAgBhB,EAASiB,KAAI,SAAUC,GACzC,IAAIC,EAAe,IAAIlC,WAAWiC,GAC9BE,EAAgBD,EAAazD,OAEjC,OADAA,GAAUoD,EAAeM,EAAgBL,EAClCI,CACT,IAGIE,EAAiB,IAAIpC,WAAWvB,GAGpC2D,EAAeC,IAAIV,EAAa,GAGhC,IAAIW,EAAW,EAOf,OANAP,EAAcQ,SAAQ,SAAUL,GAC9BE,EAAeC,IAAIV,EAAaW,GAChCF,EAAeC,IAAIH,EAAcI,EAAWT,GAC5CS,GAAYT,EAAeK,EAAazD,MAC1C,IACA2D,EAAeC,IAAIT,EAAaU,GACzB,CACLE,KAAMJ,EAAeK,OACrBzB,SAAUA,EAEd,CAQA,SAAS0B,EAAgBC,GACvB,IAAIvC,EAAU,IAAIJ,WAAW2C,GAQzBC,EAAY/C,EAAmB,YAC/BgD,EAAcpC,EAAUL,EAASwC,EAAW,EAJ1B,KAKtB,IAAqB,IAAjBC,EACF,MAAM,IAAIC,MAAM,iDAElB,IAAIrB,EAnLN,SAA4B1B,GAK1B,IAJA,IAAIO,EAASC,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,EAE7EwC,GADQxC,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,IACzBS,EAAItB,OAAS6B,EAClCR,EAAM,GACDtB,EAAI8B,EAAQ9B,EAAI8B,EAASyC,EAAWvE,IAC3CsB,GAAOJ,OAAOsD,aAAajD,EAAIvB,IAEjC,OAAOsB,CACT,CA0KemD,CAAmB7C,EAAS,EAAGyC,GACxCK,EAvJN,SAA0BzB,GAExB,IADA,IAAI0B,EAAQ1B,EAAO2B,MAAM,QAChB5E,EAAI,EAAGA,EAAI2E,EAAM1E,OAAQD,IAChC,GAA8B,OAA1B2E,EAAM3E,GAAG6E,OAAO,EAAG,GACrB,OAAOF,EAAM3E,GAGjB,OAAO,IACT,CA+IuB8E,CAAiB7B,GACtC,IAAKyB,EACH,MAAM,IAAIJ,MAAM,wDASlB,IAPA,IAMIS,EANAvC,EAAWnB,EAAmBqD,GAC9BM,EAAiBxC,EAASvC,OAC1BgF,EAAa,GACbnD,EAASkD,GAIa,IAAnBD,IAMkB,KAHvBA,EAAgB9C,EAAUL,EAASY,EAAUV,KAHlB,CAS3B,IAAIoD,EAAmBjD,EAAUL,EAASwC,EAAWtC,EA7BjC,KA8BpB,IAA0B,IAAtBoD,EACF,MAAM,IAAIZ,MAAM,4CAElBxC,EAASoD,EAAmBd,EAAUnE,OAGtC,IACI+D,EAAOG,EAASgB,MAAMrD,EAAQiD,EADd,GAIpBE,EAAWG,KAAKpB,GAIhBlC,EAASiD,EAAgBC,CAC3B,CACA,OAAOC,CACT,CAEA,SAASI,EAAS7F,GAChB,MAAwB,WAAjBD,EAAQC,IAA6B,OAARA,CACtC,CACA,SAAS8F,EAAc9F,GACrB,OAAmC,IAA5Bc,OAAOiF,KAAK/F,GAAKS,QAAgBT,EAAIG,cAAgBW,MAC9D,C,mBAUA,IAAIkF,EAAiB,SAAwBC,GAC3C,OAAOA,EAAO,EAChB,EACIC,EACK,oBADLA,EAEU,yBAFVA,EAGY,2BAHZA,EAIG,kBAm/CP,IAEIC,EAAM,CACRC,eAj+CgC,WAchC,SAASA,EAAeC,IAnU1B,SAAyBC,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAI9E,UAAU,oCAExB,CAgUI+E,CAAgBC,KAAML,GACtBK,KAAKC,QAAUL,EAAQM,IAClBF,KAAKC,SACRE,QAAQC,MAAM,sEAEZ,aAAcR,IAChBI,KAAKK,SAAWT,EAAQS,SAClB,aAAcT,GAClBO,QAAQC,MAAM,8DAEhBJ,KAAKM,SAAWV,EAAQU,UAEtB,kBAAmBV,GACrBO,QAAQI,IAAI,+BAA+B1D,OAAO+C,EAAQY,gBAC1DR,KAAKS,QAAU,GAAG5D,OAAOmD,KAAKC,QAAS,KAAKpD,OAAO+C,EAAQY,gBAE3DR,KAAKS,QAAUT,KAAKC,QAElB,kBAAmBL,GACrBO,QAAQI,IAAI,+BAA+B1D,OAAO+C,EAAQc,gBAC1DV,KAAKW,QAAU,GAAG9D,OAAOmD,KAAKC,QAAS,KAAKpD,OAAO+C,EAAQc,gBAE3DV,KAAKW,QAAUX,KAAKC,QAElB,kBAAmBL,GACrBO,QAAQI,IAAI,+BAA+B1D,OAAO+C,EAAQgB,gBAC1DZ,KAAKa,QAAU,GAAGhE,OAAOmD,KAAKC,QAAS,KAAKpD,OAAO+C,EAAQgB,gBAE3DZ,KAAKa,QAAUb,KAAKC,QAElB,iBAAkBL,IACpBI,KAAKc,aAAelB,EAAQkB,cAI9Bd,KAAKe,QAAUnB,EAAQmB,SAAW,CAAC,EAGnCf,KAAKgB,iBAAmBpB,EAAQoB,kBAAoB,WAEpD,EAGAhB,KAAKiB,SAA8B,IAApBrB,EAAQqB,OACzB,CAlWF,IAAsBnB,EAAaoB,EAAYC,EAwsD7C,OAxsDoBrB,EAyWPH,EAzWoBuB,EAyWJ,CAAC,CAC5B1G,IAAK,aACL4G,MAAO,SAAoBH,GACzBjB,KAAKiB,QAAUA,CACjB,GAMC,CACDzG,IAAK,aACL4G,MAAO,WACL,OAAOpB,KAAKiB,OACd,GACC,CACDzG,IAAK,eAaL4G,MAAO,SAAsBlB,EAAKmB,GAChC,IAAIC,EAAQtB,KACRe,EAAUjF,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/E8D,EAAU9D,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EkF,EAAmBhB,KAAKgB,iBAC1BF,EAAed,KAAKc,aACtB,OAAO,IAAIS,SAAQ,SAAUC,EAASC,GACpC,IAAIC,EAAU9B,EAAQ8B,QAAU9B,EAAQ8B,QAAU,IAAIC,eACtDD,EAAQE,KAAKP,EAAQnB,GAAK,GACtB,iBAAkBN,IACpB8B,EAAQG,aAAejC,EAAQiC,cAER,WAArBvI,EAAQyH,IACV1G,OAAOiF,KAAKyB,GAASjD,SAAQ,SAAUtD,GACrCkH,EAAQI,iBAAiBtH,EAAKuG,EAAQvG,GACxC,IAKF,IA2DmDuH,EA3D/CC,EAAcV,EAAMP,QAoDxB,GAnDA1G,OAAOiF,KAAK0C,GAAalE,SAAQ,SAAUtD,GACzCkH,EAAQI,iBAAiBtH,EAAKwH,EAAYxH,GAC5C,IAGAkH,EAAQO,YAAc,WAEtB,EAGAP,EAAQQ,UAAY,WAEpB,EAGAR,EAAQS,mBAAqB,WAC3B,GAA2B,IAAvBT,EAAQU,WACV,GAAuB,MAAnBV,EAAQW,OACVb,EAAQE,EAAQxD,eACX,GAAuB,MAAnBwD,EAAQW,OACbf,EAAML,SACRd,QAAQmC,KAAK,mCAAoCZ,GAEnDF,EAAQE,EAAQxD,eACX,GAAuB,MAAnBwD,EAAQW,OACbf,EAAML,SACRd,QAAQmC,KAAK,+BAAgCZ,GAE/CF,EAAQ,QACH,CACL,IAAIpB,EAAQ,IAAI/B,MAAM,kBACtB+B,EAAMsB,QAAUA,EAChBtB,EAAMlC,SAAWwD,EAAQxD,SACzBkC,EAAMiC,OAASX,EAAQW,OACnBf,EAAML,UACRd,QAAQC,MAAM,mBAAoBsB,GAClCvB,QAAQC,MAAMA,GACdD,QAAQC,MAAMA,EAAMlC,WAEtB8C,EAAiBZ,GACjBqB,EAAOrB,EACT,CAEJ,EAGI,qBAAsBR,GACgB,mBAA7BA,EAAQ2C,mBACjBb,EAAQc,WAAa5C,EAAQ2C,kBAG7BzB,GA5MZ,SAA8BA,GAC5B,IAAI2B,EAAUC,MAAMC,QAAQ7B,IAAiBA,EAAa8B,OAAM,SAAUC,GACxE,MAA8B,mBAAhBA,GAAqD,IAAvBA,EAAY7I,MAC1D,IAIA,OAHKyI,GACHtC,QAAQmC,KAAK,kHAERG,CACT,CAoM4BK,CAAqBhC,GAAe,CACtD,IAAIiC,EAAkB1I,OAAO2I,OAAO,CAAC,EAAGjC,EAASO,EAAMP,SACnDkC,EAAW,CACb5B,OAAQA,EACRnB,IAAKA,EACLa,QAASgC,GASPG,GAP6CnB,EAObjB,EAN3B,SAAUqC,GACf,OAAOpB,EAAUqB,QAAO,SAAUtJ,EAAOuJ,GACvC,OAAOA,EAAGvJ,EAAOmJ,EACnB,GAAGE,EACL,GAGFzB,EAAUwB,EAAaxB,EACzB,CAGI,oBAAqB9B,GACnBA,EAAQ0D,kBACV5B,EAAQ4B,iBAAkB,GAG1B,SAAU1D,EACZ8B,EAAQ6B,KAAK3D,EAAQ7B,MAErB2D,EAAQ6B,MAEZ,GACF,GAWC,CACD/I,IAAK,WACL4G,MAAO,SAAkBlB,EAAKa,EAASc,EAAcU,EAAkBe,GACrE,OAAOtD,KAAKwD,aAAatD,EAAK,MAAOa,EAAS,CAC5Cc,aAAcA,EACdU,iBAAkBA,EAClBe,gBAAiBA,GAErB,GAWC,CACD9I,IAAK,0BACL4G,MAAO,SAAiClB,GACtC,IAAIuD,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9EyG,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxD6I,EAAqBxD,EACD,WAApB5G,EAAQmK,KACLpE,EAAcoE,KACjBC,GAAsB/D,EAAegE,sBAAsBF,KAG/D,IAAI1C,EAAU,CACZ6C,OAAQnE,GAGV,OAAOO,KAAK6D,SAASH,EAAoB3C,EADtB,OAC6CwB,EAAkBe,EACpF,GAWC,CACD9I,IAAK,yBACL4G,MAAO,SAAgClB,GACrC,IAAIuD,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9EyG,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxD6I,EAAqBxD,EACD,WAApB5G,EAAQmK,KACLpE,EAAcoE,KACjBC,GAAsB/D,EAAegE,sBAAsBF,KAG/D,IAAI1C,EAAU,CACZ6C,OAAQnE,GAGV,OAAOO,KAAK6D,SAASH,EAAoB3C,EADtB,OAC6CwB,EAAkBe,EACpF,GAYC,CACD9I,IAAK,gBACL4G,MAAO,SAAuBlB,EAAK4D,GACjC,IAAIL,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9EyG,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxD6I,EAAqBxD,EACD,WAApB5G,EAAQmK,KACLpE,EAAcoE,KACjBC,GAAsB/D,EAAegE,sBAAsBF,KAG/D,IAEI1C,EAAU,CACZ6C,OAF2BjE,EAAeoE,6BAA6BD,EAD/C,CAAC,SAAU,UAAW,aAAc,YAAa,YAAa,eAMxF,OAAO9D,KAAK6D,SAASH,EAAoB3C,EADtB,cAC6CwB,EAAkBe,EACpF,GAYC,CACD9I,IAAK,eACL4G,MAAO,SAAsBlB,EAAK4D,GAChC,IAAIL,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9EyG,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxD6I,EAAqBxD,EACD,WAApB5G,EAAQmK,KACLpE,EAAcoE,KACjBC,GAAsB/D,EAAegE,sBAAsBF,KAG/D,IAEI1C,EAAU,CACZ6C,OAF2BjE,EAAeoE,6BAA6BD,EAD/C,CAAC,QAAS,SAAU,YAAa,aAAc,WAAY,cAMrF,OAAO9D,KAAK6D,SAASH,EAAoB3C,EADtB,cAC6CwB,EAAkBe,EACpF,GAYC,CACD9I,IAAK,gBACL4G,MAAO,SAAuBlB,EAAK4D,GACjC,IAAIL,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9EyG,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxD6I,EAAqBxD,EACD,WAApB5G,EAAQmK,KACLpE,EAAcoE,KACjBC,GAAsB/D,EAAegE,sBAAsBF,KAG/D,IAEI1C,EAAU,CACZ6C,OAF2BjE,EAAeoE,6BAA6BD,EAD/C,CAAC,SAAU,UAAW,aAAc,YAAa,gBAM3E,OAAO9D,KAAK6D,SAASH,EAAoB3C,EADtB,cAC6CwB,EAAkBe,EACpF,GAMC,CACD9I,IAAK,yBAcL4G,MAAO,SAAgClB,EAAK4D,EAAYE,EAAWP,GACjE,IAIIQ,EAHA1B,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxDkG,EAAU,CAAC,EAuBf,OA1BejF,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,IAAmBA,UAAU,GAM5EmI,EAAsB,CAAC,aAAc,YAAa,YAAa,cAE/DA,EAAsB,CACpB,sBAAuB,CAAC,qBACxB,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAAe,aAC1C,yBAA0B,CAAC,cAAe,aAC1C,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,cAEzBD,IACFjD,EAAQmD,MAAQvE,EAAewE,4BAA4BH,KAG/DjD,EAAQ6C,OAASjE,EAAeyE,sCAAsCN,EAAYG,GAC3EjE,KAAK6D,SAAS3D,EAAKa,EAAS,cAAewB,EAAkBe,GAAiBe,KAAKpG,EAC5F,GAcC,CACDzD,IAAK,yBACL4G,MAAO,SAAgClB,EAAK4D,EAAYE,EAAWP,GACjE,IAIIQ,EAHA1B,EAAmBzG,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACzDyI,EAAkBxH,UAAU9B,OAAS,EAAI8B,UAAU,QAAKjB,EACxDkG,EAAU,CAAC,EAmBf,OAtBejF,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,IAAmBA,UAAU,GAM5EmI,EAAsB,CAAC,SAAU,UAAW,cAAe,YAAa,eAExEA,EAAsB,CACpB,0BAA2B,CAAC,eAC5B,0BAA2B,CAAC,eAC5B,0BAA2B,CAAC,aAC5B,0BAA2B,CAAC,aAC5B,0BAA2B,CAAC,aAC5B,0BAA2B,CAAC,aAC5B,0BAA2B,CAAC,cAE1BD,IACFjD,EAAQmD,MAAQvE,EAAewE,4BAA4BH,KAG/DjD,EAAQ6C,OAASjE,EAAeyE,sCAAsCN,EAAYG,GAC3EjE,KAAK6D,SAAS3D,EAAKa,EAAS,cAAewB,EAAkBe,GAAiBe,KAAKpG,EAC5F,GAaC,CACDzD,IAAK,oCACL4G,MAAO,SAA2ClB,EAAK4D,EAAYL,EAAQlB,EAAkBe,GAC3F,IAAIvC,EAAU,CAAC,EACXuD,EAAmB,oBACnBL,EAAsB,CACxB,sBAAuB,CAACK,GACxB,sBAAuB,CAACA,GACxB,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,yBAA0B,CAACA,GAC3B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,GAC5B,0BAA2B,CAACA,IAE1BC,EAAuBT,EAO3B,OANKA,IACHS,EAAuB,CAAC,CACtBC,UAAWF,KAGfvD,EAAQ6C,OAASjE,EAAeyE,sCAAsCG,EAAsBN,GACrFjE,KAAK6D,SAAS3D,EAAKa,EAAS,cAAewB,EAAkBe,GAAiBe,KAAKpG,EAC5F,GAcC,CACDzD,IAAK,0CACL4G,MAAO,SAAiDlB,EAAK4D,EAAYE,EAAWP,EAAQlB,EAAkBe,GAC5G,IAAIvC,EAAU,CAAC,EACXuD,EAAmB,2BACnBL,EAAsB,CACxB,sBAAuB,CAACK,IAEtBC,EAAuBT,EAU3B,OATKA,IACHS,EAAuB,CAAC,CACtBC,UAAWF,KAGXN,IACFjD,EAAQmD,MAAQvE,EAAewE,4BAA4BH,IAE7DjD,EAAQ6C,OAASjE,EAAeyE,sCAAsCG,EAAsBN,GACrFjE,KAAK6D,SAAS3D,EAAKa,EAAS,cAAewB,EAAkBe,GAAiBe,KAAKpG,EAC5F,GAaC,CACDzD,IAAK,YACL4G,MAAO,SAAmBlB,EAAKa,EAAShD,EAAMwE,EAAkBe,EAAiB5B,GAC/E,OAAO1B,KAAKwD,aAAatD,EAAK,OAAQa,EAAS,CAC7ChD,KAAMA,EACNwE,iBAAkBA,EAClBe,gBAAiBA,EACjB5B,QAASA,GAEb,GAWC,CACDlH,IAAK,2BACL4G,MAAO,SAAkClB,EAAKnC,EAAMwE,EAAkBe,GACpE,IAAIvC,EAAU,CACZ,eAAgBtB,GAElB,OAAOO,KAAKyE,UAAUvE,EAAKa,EAAShD,EAAMwE,EAAkBe,EAC9D,GAQC,CACD9I,IAAK,mBAQL4G,MAAO,WACL,IAAIxB,EAAU9D,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACnFqE,QAAQI,IAAI,sBACZ,IAAI+C,GAAkB,EAClBpD,EAAM,GAAGrD,OAAOmD,KAAKS,QAAS,YASlC,MARI,gBAAiBb,IACnBM,GAAOP,EAAegE,sBAAsB/D,EAAQ8E,cAElD,oBAAqB9E,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GASC,CACD9I,IAAK,wBACL4G,MAAO,SAA+BxB,GACpC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,kEAElB8B,QAAQI,IAAI,8BAA8B1D,OAAO+C,EAAQgF,mBACzD,IAAI1E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,aAC5EtB,GAAkB,EAMtB,MALI,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GASC,CACD9I,IAAK,kBACL4G,MAAO,WACL,IAAIxB,EAAU9D,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EoE,EAAMF,KAAKS,QACX,qBAAsBb,IACxBO,QAAQI,IAAI,0BAA0B1D,OAAO+C,EAAQgF,mBACrD1E,GAAO,YAAYrD,OAAO+C,EAAQgF,mBAEpC1E,GAAO,UACH,gBAAiBN,IACnBM,GAAOP,EAAegE,sBAAsB/D,EAAQ8E,cAEtD,IAAIpB,GAAkB,EAMtB,MALI,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GAUC,CACD9I,IAAK,yBACL4G,MAAO,SAAgCxB,GACrC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,mEAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,oEAElB8B,QAAQI,IAAI,+BAA+B1D,OAAO+C,EAAQiF,oBAC1D,IAAI3E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,aAC1HvB,GAAkB,EAMtB,MALI,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GAUC,CACD9I,IAAK,qBACL4G,MAAO,WACL,IAAIxB,EAAU9D,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EoE,EAAMF,KAAKS,QACX6C,GAAkB,EAqBtB,MApBI,qBAAsB1D,GACxBM,GAAO,YAAYrD,OAAO+C,EAAQgF,kBAC9B,sBAAuBhF,GACzBO,QAAQI,IAAI,kCAAkC1D,OAAO+C,EAAQiF,oBAC7D3E,GAAO,WAAWrD,OAAO+C,EAAQiF,oBAEjC1E,QAAQI,IAAI,iCAAiC1D,OAAO+C,EAAQgF,oBAG9DzE,QAAQI,IAAI,wBAEdL,GAAO,aACH,gBAAiBN,IACnBM,GAAOP,EAAegE,sBAAsB/D,EAAQ8E,cAElD,oBAAqB9E,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GASC,CACD9I,IAAK,0BACL4G,MAAO,SAAiCxB,GACtC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,mCAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,oCAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,iCAElB,IAAIyG,EAAclF,EAAQkF,aAAerF,EACrCsF,EAAiBnF,EAAQmF,gBAAkB,IAC3CtB,EAAS,GACbA,EAAOtE,KAAK,oBACZsE,EAAOtE,KAAK,YAAYtC,OAAO+C,EAAQgF,mBACvCnB,EAAOtE,KAAK,aAAatC,OAAO+C,EAAQiF,oBACxCpB,EAAOtE,KAAK,aAAatC,OAAO+C,EAAQoF,iBACxCvB,EAAOtE,KAAK,eAAetC,OAAOiI,IAClCrB,EAAOtE,KAAK,kBAAkBtC,OAAOkI,IACrC,IAAIE,EAAcxB,EAAOyB,KAAK,KAC9B,MAAO,GAAGrI,OAAOmD,KAAKW,QAAS,KAAK9D,OAAOoI,EAC7C,GAUC,CACDzK,IAAK,2BACL4G,MAAO,SAAkCxB,GACvC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,qEAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,sEAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,mEAElB8B,QAAQI,IAAI,iCAAiC1D,OAAO+C,EAAQoF,iBAC5D,IAAI9E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,aACxK1B,GAAkB,EAMtB,MALI,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAGvBtD,KAAK2E,wBAAwBzE,EAAK,CAAC,GAAG,EAAOoD,EACtD,GAUC,CACD9I,IAAK,yBACL4G,MAAO,SAAgCxB,GACrC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,mEAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,oEAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,iEAElB,KAAM,iBAAkBuB,GACtB,MAAM,IAAIvB,MAAM,+DAElB8B,QAAQI,IAAI,mBAAmB1D,OAAO+C,EAAQuF,aAAaxI,WAAY,iBAAiBE,OAAO+C,EAAQoF,iBACvG,IAAI9E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,YAAYnI,OAAO+C,EAAQuF,aAAaxI,YAChNmH,EAAalE,EAAQkE,WACrBR,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EACH,OAAO9D,KAAKoF,wCAAwClF,GAAK,GAAO,GAAO,EAAOqC,EAAkBe,GAGlG,GADuB3D,EAAe0F,qBAAqBvB,GACtC9J,OAAS,EAAG,CAM/B,IAcI+G,EAAU,CACZ6C,OAAQjE,EAAeyE,sCAAsCN,EAfrC,CACxB,sBAAuB,CAAC,4BACxB,sBAAuB,CAAC,qBACxB,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAC3B,yBAA0B,CAAC,cAAe,aAC1C,yBAA0B,CAAC,cAAe,aAC1C,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,aAC3B,yBAA0B,CAAC,gBAK7B,OAAO9D,KAAK6D,SAAS3D,EAAKa,EAAS,cAAewB,EAAkBe,GAAiBe,KAAKpG,EAC5F,CACA,IAAIqH,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,EAAgBE,WAAW,eAC7B,OAAOxF,KAAKoF,wCAAwClF,EAAK4D,GAAY,GAAO,EAAOvB,EAAkBe,GAEvG,GAAIgC,EAAgBE,WAAW,SAC7B,OAAOxF,KAAKyF,uBAAuBvF,EAAK4D,GAAY,GAAO,GAAO,EAAOvB,EAAkBe,GAE7F,GAAIgC,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK0F,uBAAuBxF,EAAK4D,GAAY,GAAO,GAAO,EAAOvB,EAAkBe,GAE7F,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,8CACxD,GAYC,CACD9K,IAAK,2BACL4G,MAAO,SAAkCxB,GACvC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,qEAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,sEAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,mEAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,aACxKlB,EAAalE,EAAQkE,WACvBY,EAAc9E,EAAQ8E,YAEpBpB,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EAKH,OAHIY,IACFxE,GAAOP,EAAegE,sBAAsBe,IAEvC1E,KAAK6D,SAAS3D,EAhBT,CAAC,EAYM,cAI8BqC,EAAkBe,GAErE,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK2F,cAAczF,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,GAAIgC,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK4F,cAAc1F,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,GAAIgC,EAAgBE,WAAW,QAC7B,OAAOxF,KAAK6F,aAAa3F,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE3E,GAAIgC,IAAoB7F,EACtB,OAAOO,KAAK8F,uBAAuB5F,EAAKwE,EAAanC,EAAkBe,GAEzE,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,sBAAwB,sCAChF,GAYC,CACD9K,IAAK,4BACL4G,MAAO,SAAmCxB,GACxC,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,qEAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,sEAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,mEAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,cACxKlB,EAAalE,EAAQkE,WACvBY,EAAc9E,EAAQ8E,YAEpBpB,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EAKH,OAHIY,IACFxE,GAAOP,EAAegE,sBAAsBe,IAEvC1E,KAAK6D,SAAS3D,EAhBT,CAAC,EAYM,cAI8BqC,EAAkBe,GAErE,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK2F,cAAczF,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,sBAAwB,sCAChF,GAaC,CACD9K,IAAK,iCACL4G,MAAO,SAAwCxB,GAC7C,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,4EAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,6EAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,0EAElB,KAAM,iBAAkBuB,GACtB,MAAM,IAAIvB,MAAM,wEAElB8B,QAAQ4F,MAAM,4BAA4BlJ,OAAO+C,EAAQuF,aAAaxI,WAAY,iBAAiBE,OAAO+C,EAAQoF,iBAClH,IAAI9E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,YAAYnI,OAAO+C,EAAQuF,aAAaxI,WAAY,aAC5NmH,EAAalE,EAAQkE,WACvBY,EAAc9E,EAAQ8E,YAEpBpB,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EAKH,OAHIY,IACFxE,GAAOP,EAAegE,sBAAsBe,IAEvC1E,KAAK6D,SAAS3D,EAhBT,CAAC,EAYM,eAI8B,EAAOoD,GAE1D,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK2F,cAAczF,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,GAAIgC,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK4F,cAAc1F,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,sBAAwB,mCAChF,GAYC,CACD9K,IAAK,kCACL4G,MAAO,SAAyCxB,GAC9C,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,4EAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,6EAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,0EAElB,KAAM,iBAAkBuB,GACtB,MAAM,IAAIvB,MAAM,wEAElB8B,QAAQ4F,MAAM,4BAA4BlJ,OAAO+C,EAAQuF,aAAaxI,WAAY,iBAAiBE,OAAO+C,EAAQoF,iBAClH,IAAI9E,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,eAAgB,YAAYnI,OAAO+C,EAAQuF,aAAaxI,WAAY,cAC5NmH,EAAalE,EAAQkE,WACvBY,EAAc9E,EAAQ8E,YAEpBpB,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EAKH,OAHIY,IACFxE,GAAOP,EAAegE,sBAAsBe,IAEvC1E,KAAK6D,SAAS3D,EAhBT,CAAC,EAYM,cAI8BqC,EAAkBe,GAErE,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,EAAgBE,WAAW,SAC7B,OAAOxF,KAAK2F,cAAczF,EAAK4D,EAAYY,EAAanC,EAAkBe,GAE5E,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,sBAAwB,mCAChF,GAUC,CACD9K,IAAK,mBACL4G,MAAO,SAA0BxB,GAC/B,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,kCAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,mCAElB,KAAM,mBAAoBuB,GACxB,MAAM,IAAIvB,MAAM,gCAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,kBAAmB,eAAehI,OAAO+C,EAAQoF,gBACxJlB,EAAalE,EAAQkE,WACrBkC,EAAwBpG,EAAQ0D,gBAClCA,OAA4C,IAA1B0C,GAA2CA,EAC3DC,EAAwBrG,EAAQ2C,iBAClCA,OAA6C,IAA1B0D,GAA2CA,EAChE,IAAKnC,EACH,OAAO9D,KAAKkG,kCAAkChG,GAAK,GAAO,EAAOqC,EAAkBe,GAAiBe,KAAK9E,GAE3G,IAAI+F,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,IAAoB7F,EACtB,OAAOO,KAAKkG,kCAAkChG,EAAK4D,GAAY,EAAOvB,EAAkBe,GAAiBe,KAAK9E,GAEhH,MAAM,IAAIlB,MAAM,cAAcxB,OAAOyI,EAAiB,gDACxD,GAUC,CACD9K,IAAK,iBACL4G,MAAO,SAAwBxB,GAC7B,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,kCAElB,KAAM,sBAAuBuB,GAC3B,MAAM,IAAIvB,MAAM,mCAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,iBAAkB,YAAY/H,OAAO+C,EAAQiF,mBACvGf,EAAalE,EAAQkE,WACrBR,GAAkB,EAClB,oBAAqB1D,GACnBA,EAAQ0D,kBACVA,EAAkB1D,EAAQ0D,iBAG9B,IAAIf,GAAmB,EAIvB,GAHI,qBAAsB3C,IACxB2C,EAAmB3C,EAAQ2C,mBAExBuB,EACH,OAAO9D,KAAKkG,kCAAkChG,GAAK,GAAO,EAAOqC,EAAkBe,GAErF,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,IAAoB7F,EACtB,OAAOO,KAAKkG,kCAAkChG,EAAK4D,GAAY,EAAOvB,EAAkBe,GAE1F,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,8CACxD,GAQC,CACD9K,IAAK,gBACL4G,MAAO,SAAuBxB,GAC5B,KAAM,qBAAsBA,GAC1B,MAAM,IAAIvB,MAAM,kCAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKW,QAAS,aAAa9D,OAAO+C,EAAQgF,kBAC1Dd,EAAalE,EAAQkE,WACrBqC,EAAyBvG,EAAQ0D,gBACnCA,OAA6C,IAA3B6C,GAA4CA,EAC5DC,EAAyBxG,EAAQ2C,iBACnCA,OAA8C,IAA3B6D,GAA4CA,EACjE,IAAKtC,EACH,OAAO9D,KAAKkG,kCAAkChG,GAAK,GAAO,EAAOqC,EAAkBe,GAErF,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,IAAoB7F,EACtB,OAAOO,KAAKkG,kCAAkChG,EAAK4D,GAAY,EAAOvB,EAAkBe,GAE1F,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,6CACxD,GAYC,CACD9K,IAAK,mBACL4G,MAAO,SAA0BxB,GAC/B,KAAM,gBAAiBA,GACrB,MAAM,IAAIvB,MAAM,4BAElB,IAAI6B,EAAMN,EAAQyG,YACdvC,EAAalE,EAAQkE,WACvBE,EAAYpE,EAAQoE,UAClBsC,EAAyB1G,EAAQ0D,gBACnCA,OAA6C,IAA3BgD,GAA4CA,EAC5DC,EAAyB3G,EAAQ2C,iBACnCA,OAA8C,IAA3BgE,GAA4CA,EACjE,IAAKzC,EACH,OAAO9D,KAAKoF,wCAAwClF,EAAK4D,EAAYE,GAAW,GAAO,EAAOV,GAEhG,IAAIgC,EAAkB3F,EAAe4F,oBAAoBzB,GACzD,GAAIwB,IAAoB7F,EACtB,OAAOO,KAAKoF,wCAAwClF,EAAK4D,EAAYE,GAAW,EAAOzB,EAAkBe,GAE3G,GAAIgC,EAAgBE,WAAW,SAC7B,OAAOxF,KAAKyF,uBAAuBvF,EAAK4D,EAAYE,GAAW,GAAO,EAAOzB,EAAkBe,GAEjG,MAAM,IAAIjF,MAAM,cAAcxB,OAAOyI,EAAiB,iDACxD,GAUC,CACD9K,IAAK,iBACL4G,MAAO,SAAwBxB,GAC7B,KAAM,aAAcA,GAClB,MAAM,IAAIvB,MAAM,qCAElB,IAAI6B,EAAM,GAAGrD,OAAOmD,KAAKa,QAAS,YAC9B,qBAAsBjB,IACxBM,GAAO,IAAIrD,OAAO+C,EAAQgF,mBAE5B,IAAI4B,EAAmBnK,EAAgBuD,EAAQtD,UAC7CyB,EAAOyI,EAAiBzI,KACxBxB,EAAWiK,EAAiBjK,SAC1BwE,EAAU,CACZ,eAAgB,0DAA6DlE,OAAON,EAAU,MAE5FkK,EAAyB7G,EAAQ0D,gBACnCA,OAA6C,IAA3BmD,GAA4CA,EAChE,OAAOzG,KAAKyE,UAAUvE,EAAKa,EAAShD,EAAM6B,EAAQ2C,iBAAkBe,EAAiB1D,EAAQ8B,QAC/F,IA5gD2CP,EA6gDzC,CAAC,CACH3G,IAAK,wBACL4G,MAAO,WACL,IAAIqC,EAAS3H,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC9E4K,EAAc,IAOlB,OANArM,OAAOiF,KAAKmE,GAAQ3F,SAAQ,SAAUtD,EAAKuB,GAC3B,IAAVA,IACF2K,GAAe,KAEjBA,GAAe,GAAG7J,OAAOrC,EAAK,KAAKqC,OAAO8J,mBAAmBlD,EAAOjJ,IACtE,IACOkM,CACT,GACC,CACDlM,IAAK,0BACL4G,MAAO,SAAiCoD,GACtC,IAAKA,EACH,MAAM,IAAInG,MAAM,2BAA2BxB,OAAO2H,IAEpD,IAAIoC,EAAWpC,EAAUqC,QAAQ,KACjC,IAAkB,IAAdD,EACF,MAAM,IAAIvI,MAAM,2BAA2BxB,OAAO2H,IAEpD,IAAIsC,EAAgBtC,EAAUtF,MAAM,EAAG0H,GAEvC,IADY,CAAC,cAAe,QAAS,OAAQ,SAClCG,SAASD,GAClB,MAAM,IAAIzI,MAAM,2BAA2BxB,OAAO2H,IAEpD,GAAIA,EAAUtF,MAAM0H,EAAW,GAAGG,SAAS,KACzC,MAAM,IAAI1I,MAAM,2BAA2BxB,OAAO2H,GAEtD,GACC,CACDhK,IAAK,kBACL4G,MAAO,SAAyBoD,GAE9B,OADA7E,EAAeqH,wBAAwBxC,GAChCA,EAAU7F,MAAM,IACzB,GASC,CACDnE,IAAK,+BACL4G,MAAO,SAAsC0C,EAAYG,GACvD,IAAKvB,MAAMC,QAAQmB,GACjB,MAAM,IAAIzF,MAAM,uDAUlB,OARsByF,EAAWvG,KAAI,SAAU0J,GAC7C,IAAIzC,EAAYyC,EAAKzC,UAErB,GADA7E,EAAeqH,wBAAwBxC,IAClCP,EAAoB8C,SAASvC,GAChC,MAAM,IAAInG,MAAM,cAAcxB,OAAO2H,EAAW,6CAElD,OAAOA,CACT,IACuBU,KAAK,KAC9B,GASC,CACD1K,IAAK,wCACL4G,MAAO,SAA+C0C,EAAYG,GAChE,IAAKvB,MAAMC,QAAQmB,GACjB,MAAM,IAAIzF,MAAM,uDAElB,IAAKqE,MAAMC,QAAQsB,KAAyB7E,EAAS6E,GACnD,MAAM,IAAI5F,MAAM,mEAElB,IAAI6I,EAAkB,GAuCtB,OAtCApD,EAAWhG,SAAQ,SAAUmJ,GAC3B,IAAIE,EAAoBF,EAAKE,kBAC3B3C,EAAYyC,EAAKzC,UACnB7E,EAAeqH,wBAAwBxC,GACvC,IAAI4C,EAAa,4BAA6BvK,OAAO2H,EAAW,KAChE,GAAIpF,EAAS6E,GAAsB,CAGjC,KAAK5J,OAAOgN,OAAOpD,GAAqBqD,KAAK,GAAGP,SAASvC,IAClDA,EAAU+C,SAAS,OAAU/C,EAAU+C,SAAS,MACnD,MAAM,IAAIlJ,MAAM,cAAcxB,OAAO2H,EAAW,6CAGpD,GAAI2C,EAAmB,CACrB,GAA0B,MAAtBA,EAA2B,CAC7B,IAAK9M,OAAOiF,KAAK2E,GAAqB8C,SAASI,GAC7C,MAAM,IAAI9I,MAAM,mBAAmBxB,OAAOsK,EAAmB,6CAE/D,IAAIK,EAAqBvD,EAAoBkD,GAC7C,IAAKK,EAAmBT,SAASvC,GAAY,CAC3C,IAAIiD,EAAa9H,EAAe+H,gBAAgBlD,GAAW,GAC3DgD,EAAmBjK,KAAI,SAAUoK,GAC/B,IAAIC,EAAejI,EAAe+H,gBAAgBC,GAAmB,GAErE,GADmBF,IAAeG,IACbpD,EAAU+C,SAAS,QAAS/C,EAAU+C,SAAS,KAGpE,MAAM,IAAIlJ,MAAM,mBAAmBxB,OAAOsK,EAAmB,4CAC/D,GACF,CACF,CACAC,GAAc,qBAAqBvK,OAAOsK,EAC5C,CACF,MAAO,GAAIzE,MAAMC,QAAQsB,KAAyBA,EAAoB8C,SAASvC,GAC7E,MAAM,IAAInG,MAAM,cAAcxB,OAAO2H,EAAW,6CAElD0C,EAAgB/H,KAAKiI,EACvB,IACOF,EAAgBhC,KAAK,KAC9B,GAQC,CACD1K,IAAK,8BACL4G,MAAO,WACL,IAAI4C,EAAYlI,UAAU9B,OAAS,QAAsBa,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,GACpF,OAAyB,IAArBkI,EAAUhK,OACL,SAAS6C,OAAOmH,EAAU,GAAI,KAEd,IAArBA,EAAUhK,OACL,SAAS6C,OAAOmH,EAAU,GAAI,KAAKnH,OAAOmH,EAAU,IAEtD,UACT,GASC,CACDxJ,IAAK,uBACL4G,MAAO,SAA8B0C,GACnC,IAAI+D,EAAQ,IAAIC,IAChB,OAAKhE,GAAeA,EAAW9J,QAG/B8J,EAAWhG,SAAQ,SAAUmJ,GAC3B,IAAIzC,EAAYyC,EAAKzC,UACjBuD,EAAOpI,EAAe+H,gBAAgBlD,GAAW,GACrDqD,EAAMG,IAAI,GAAGnL,OAAOkL,EAAM,KAC5B,IACOrF,MAAMuF,KAAKJ,IAPTA,CAQX,GAYC,CACDrN,IAAK,sBACL4G,MAAO,SAA6B0C,GAClC,IAAKA,IAAeA,EAAW9J,OAC7B,MAAM,IAAIqE,MAAM,sCAElB,IAAI6J,EAAmBvI,EAAe0F,qBAAqBvB,GAC3D,GAAgC,IAA5BoE,EAAiBlO,OACnB,MAAM,IAAIqE,MAAM,wDACX,GAAI6J,EAAiBlO,OAAS,EACnC,MAAM,IAAIqE,MAAM,mDAElB,OAAO6J,EAAiB,EAC1B,IArsDEhH,GAAYtH,EAAkBkG,EAAYnG,UAAWuH,GACrDC,GAAavH,EAAkBkG,EAAaqB,GAChD9G,OAAOC,eAAewF,EAAa,YAAa,CAC9C1F,UAAU,IAosDLuF,CACT,CAl6CkC,G","sources":["webpack:///../../../node_modules/dicomweb-client/build/dicomweb-client.es.js"],"sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\n/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should\n                   be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted\n                   (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var limit = arguments.length > 2 ? arguments[2] : undefined;\n  var itemLimit = limit || arr.length - offset;\n  var str = '';\n  for (var i = offset; i < offset + itemLimit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  var arr = new Uint8Array(str.length);\n  for (var i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  var parts = header.split('\\r\\n');\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n  return null;\n}\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (offset + token.length > message.length) {\n    return false;\n  }\n  var index = offset;\n  for (var i = 0; i < token.length; i++) {\n    if (token[i] !== message[index]) {\n      return false;\n    }\n    index += 1;\n  }\n  return true;\n}\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var maxSearchLength = arguments.length > 3 ? arguments[3] : undefined;\n  var searchLength = message.length;\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n  for (var i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * Create a random GUID\n *\n * @return {string}\n */\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  return \"\".concat(s4() + s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4()).concat(s4()).concat(s4());\n}\n\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the\n                          multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part\n                              of the multipart body. If this is not specified, a random\n                              GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This\n                                  contains both the data itself, and the boundary string\n                                  used to divide it.\n */\nfunction multipartEncode(datasets) {\n  var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid();\n  var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'application/dicom';\n  var contentTypeString = \"Content-Type: \".concat(contentType);\n  var header = \"\\r\\n--\".concat(boundary, \"\\r\\n\").concat(contentTypeString, \"\\r\\n\\r\\n\");\n  var footer = \"\\r\\n--\".concat(boundary, \"--\");\n  var headerArray = stringToUint8Array(header);\n  var footerArray = stringToUint8Array(footer);\n  var headerLength = headerArray.length;\n  var footerLength = footerArray.length;\n  var length = 0;\n\n  // Calculate the total length for the final array\n  var contentArrays = datasets.map(function (datasetBuffer) {\n    var contentArray = new Uint8Array(datasetBuffer);\n    var contentLength = contentArray.length;\n    length += headerLength + contentLength + footerLength;\n    return contentArray;\n  });\n\n  // Allocate the array\n  var multipartArray = new Uint8Array(length);\n\n  // Set the initial header\n  multipartArray.set(headerArray, 0);\n\n  // Write each dataset into the multipart array\n  var position = 0;\n  contentArrays.forEach(function (contentArray) {\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n    position += headerLength + contentArray.length;\n  });\n  multipartArray.set(footerArray, position);\n  return {\n    data: multipartArray.buffer,\n    boundary: boundary\n  };\n}\n\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\nfunction multipartDecode(response) {\n  var message = new Uint8Array(response);\n\n  /* Set a maximum length to search for the header boundaries, otherwise\n       findToken can run for a long time\n    */\n  var maxSearchLength = 1000;\n\n  // First look for the multipart mime header\n  var separator = stringToUint8Array('\\r\\n\\r\\n');\n  var headerIndex = findToken(message, separator, 0, maxSearchLength);\n  if (headerIndex === -1) {\n    throw new Error('Response message has no multipart mime header');\n  }\n  var header = uint8ArrayToString(message, 0, headerIndex);\n  var boundaryString = identifyBoundary(header);\n  if (!boundaryString) {\n    throw new Error('Header of response message does not specify boundary');\n  }\n  var boundary = stringToUint8Array(boundaryString);\n  var boundaryLength = boundary.length;\n  var components = [];\n  var offset = boundaryLength;\n\n  // Loop until we cannot find any more boundaries\n  var boundaryIndex;\n  while (boundaryIndex !== -1) {\n    // Search for the next boundary in the message, starting\n    // from the current offset position\n    boundaryIndex = findToken(message, boundary, offset);\n\n    // If no further boundaries are found, stop here.\n    if (boundaryIndex === -1) {\n      break;\n    }\n    var headerTokenIndex = findToken(message, separator, offset, maxSearchLength);\n    if (headerTokenIndex === -1) {\n      throw new Error('Response message part has no mime header');\n    }\n    offset = headerTokenIndex + separator.length;\n\n    // Extract data from response message, excluding \"\\r\\n\"\n    var spacingLength = 2;\n    var data = response.slice(offset, boundaryIndex - spacingLength);\n\n    // Add the data to the array of results\n    components.push(data);\n\n    // Move the offset to the end of the current section,\n    // plus the identified boundary\n    offset = boundaryIndex + boundaryLength;\n  }\n  return components;\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null;\n}\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\nfunction areValidRequestHooks(requestHooks) {\n  var isValid = Array.isArray(requestHooks) && requestHooks.every(function (requestHook) {\n    return typeof requestHook === 'function' && requestHook.length === 2;\n  });\n  if (!isValid) {\n    console.warn('Request hooks should have the following signature: ' + 'function requestHook(request, metadata) { return request; }');\n  }\n  return isValid;\n}\nvar getFirstResult = function getFirstResult(result) {\n  return result[0];\n};\nvar MEDIATYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream',\n  PDF: 'application/pdf',\n  JPEG: 'image/jpeg',\n  PNG: 'image/png'\n};\n\n/**\n * @typedef { import(\"../types/types\").InstanceMetadata } InstanceMetadata\n */\n\n/**\n * A callback with the request instance and metadata information\n * of the currently request being executed that should necessarily\n * return the given request optionally modified.\n * @typedef {function} RequestHook\n * @param {XMLHttpRequest} request - The original XMLHttpRequest instance.\n * @param {object} metadata - The metadata used by the request.\n */\n\n/**\n * Class for interacting with DICOMweb RESTful services.\n */\nvar DICOMwebClient = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {String} options.url - URL of the DICOMweb RESTful Service endpoint\n   * @param {String=} options.qidoURLPrefix - URL path prefix for QIDO-RS\n   * @param {String=} options.wadoURLPrefix - URL path prefix for WADO-RS\n   * @param {String=} options.stowURLPrefix - URL path prefix for STOW-RS\n   * @param {String=} options.username - Username\n   * @param {String=} options.password - Password\n   * @param {Object=} options.headers - HTTP headers\n   * @param {Array.<RequestHook>=} options.requestHooks - Request hooks.\n   * @param {Object=} options.verbose - print to console request warnings and errors, default true\n   */\n  function DICOMwebClient(options) {\n    _classCallCheck(this, DICOMwebClient);\n    this.baseURL = options.url;\n    if (!this.baseURL) {\n      console.error('no DICOMweb base url provided - calls that require a URL will fail');\n    }\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error('no password provided to authenticate with DICOMweb service');\n      }\n      this.password = options.password;\n    }\n    if ('qidoURLPrefix' in options) {\n      console.log(\"use URL prefix for QIDO-RS: \".concat(options.qidoURLPrefix));\n      this.qidoURL = \"\".concat(this.baseURL, \"/\").concat(options.qidoURLPrefix);\n    } else {\n      this.qidoURL = this.baseURL;\n    }\n    if ('wadoURLPrefix' in options) {\n      console.log(\"use URL prefix for WADO-RS: \".concat(options.wadoURLPrefix));\n      this.wadoURL = \"\".concat(this.baseURL, \"/\").concat(options.wadoURLPrefix);\n    } else {\n      this.wadoURL = this.baseURL;\n    }\n    if ('stowURLPrefix' in options) {\n      console.log(\"use URL prefix for STOW-RS: \".concat(options.stowURLPrefix));\n      this.stowURL = \"\".concat(this.baseURL, \"/\").concat(options.stowURLPrefix);\n    } else {\n      this.stowURL = this.baseURL;\n    }\n    if ('requestHooks' in options) {\n      this.requestHooks = options.requestHooks;\n    }\n\n    // Headers to pass to requests.\n    this.headers = options.headers || {};\n\n    // Optional error interceptor callback to handle any failed request.\n    this.errorInterceptor = options.errorInterceptor || function () {\n      return undefined;\n    };\n\n    // Verbose - print to console request warnings and errors, default true\n    this.verbose = options.verbose !== false;\n  }\n\n  /**\n   * Sets verbose flag.\n   *\n   * @param {Boolean} verbose\n   */\n  _createClass(DICOMwebClient, [{\n    key: \"setVerbose\",\n    value: function setVerbose(verbose) {\n      this.verbose = verbose;\n    }\n    /**\n     * Gets verbose flag.\n     *\n     * @return {Boolean} verbose\n     */\n  }, {\n    key: \"getVerbose\",\n    value: function getVerbose() {\n      return this.verbose;\n    }\n  }, {\n    key: \"_httpRequest\",\n    /**\n     * Performs an HTTP request.\n     *\n     * @param {String} url\n     * @param {String} method\n     * @param {Object} headers\n     * @param {Object} options\n     * @param {Array.<RequestHook>} options.requestHooks - Request hooks.\n     * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n     * @return {*}\n     * @private\n     */\n    value: function _httpRequest(url, method) {\n      var _this = this;\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var errorInterceptor = this.errorInterceptor,\n        requestHooks = this.requestHooks;\n      return new Promise(function (resolve, reject) {\n        var request = options.request ? options.request : new XMLHttpRequest();\n        request.open(method, url, true);\n        if ('responseType' in options) {\n          request.responseType = options.responseType;\n        }\n        if (_typeof(headers) === 'object') {\n          Object.keys(headers).forEach(function (key) {\n            request.setRequestHeader(key, headers[key]);\n          });\n        }\n\n        // now add custom headers from the user\n        // (e.g. access tokens)\n        var userHeaders = _this.headers;\n        Object.keys(userHeaders).forEach(function (key) {\n          request.setRequestHeader(key, userHeaders[key]);\n        });\n\n        // Event triggered when upload starts\n        request.onloadstart = function onloadstart() {\n          // console.log('upload started: ', url)\n        };\n\n        // Event triggered when upload ends\n        request.onloadend = function onloadend() {\n          // console.log('upload finished')\n        };\n\n        // Handle response message\n        request.onreadystatechange = function () {\n          if (request.readyState === 4) {\n            if (request.status === 200) {\n              resolve(request.response);\n            } else if (request.status === 202) {\n              if (_this.verbose) {\n                console.warn('some resources already existed: ', request);\n              }\n              resolve(request.response);\n            } else if (request.status === 204) {\n              if (_this.verbose) {\n                console.warn('empty response for request: ', request);\n              }\n              resolve([]);\n            } else {\n              var error = new Error('request failed');\n              error.request = request;\n              error.response = request.response;\n              error.status = request.status;\n              if (_this.verbose) {\n                console.error('request failed: ', request);\n                console.error(error);\n                console.error(error.response);\n              }\n              errorInterceptor(error);\n              reject(error);\n            }\n          }\n        };\n\n        // Event triggered while download progresses\n        if ('progressCallback' in options) {\n          if (typeof options.progressCallback === 'function') {\n            request.onprogress = options.progressCallback;\n          }\n        }\n        if (requestHooks && areValidRequestHooks(requestHooks)) {\n          var combinedHeaders = Object.assign({}, headers, _this.headers);\n          var metadata = {\n            method: method,\n            url: url,\n            headers: combinedHeaders\n          };\n          var pipeRequestHooks = function pipeRequestHooks(functions) {\n            return function (args) {\n              return functions.reduce(function (props, fn) {\n                return fn(props, metadata);\n              }, args);\n            };\n          };\n          var pipedRequest = pipeRequestHooks(requestHooks);\n          request = pipedRequest(request);\n        }\n\n        // Add withCredentials to request if needed\n        if ('withCredentials' in options) {\n          if (options.withCredentials) {\n            request.withCredentials = true;\n          }\n        }\n        if ('data' in options) {\n          request.send(options.data);\n        } else {\n          request.send();\n        }\n      });\n    }\n    /**\n     * Performs an HTTP GET request.\n     *\n     * @param {String} url\n     * @param {Object} headers\n     * @param {Object} responseType\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGet\",\n    value: function _httpGet(url, headers, responseType, progressCallback, withCredentials) {\n      return this._httpRequest(url, 'get', headers, {\n        responseType: responseType,\n        progressCallback: progressCallback,\n        withCredentials: withCredentials\n      });\n    }\n    /**\n     * Performs an HTTP GET request that accepts a message with application/json\n     * media type.\n     *\n     * @param {String} url\n     * @param {Object} params\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGetApplicationJson\",\n    value: function _httpGetApplicationJson(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var progressCallback = arguments.length > 2 ? arguments[2] : undefined;\n      var withCredentials = arguments.length > 3 ? arguments[3] : undefined;\n      var urlWithQueryParams = url;\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n      var headers = {\n        Accept: MEDIATYPES.DICOM_JSON\n      };\n      var responseType = 'json';\n      return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback, withCredentials);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a message with application/pdf\n     * media type.\n     *\n     * @param {String} url\n     * @param {Object} params\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGetApplicationPdf\",\n    value: function _httpGetApplicationPdf(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var progressCallback = arguments.length > 2 ? arguments[2] : undefined;\n      var withCredentials = arguments.length > 3 ? arguments[3] : undefined;\n      var urlWithQueryParams = url;\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n      var headers = {\n        Accept: MEDIATYPES.PDF\n      };\n      var responseType = 'json';\n      return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback, withCredentials);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a message with an image\n     media type.\n     *\n     * @param {String} url\n     * @param {Object[]} mediaTypes\n     * @param {Object} params\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGetImage\",\n    value: function _httpGetImage(url, mediaTypes) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var progressCallback = arguments.length > 3 ? arguments[3] : undefined;\n      var withCredentials = arguments.length > 4 ? arguments[4] : undefined;\n      var urlWithQueryParams = url;\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n      var supportedMediaTypes = ['image/', 'image/*', 'image/jpeg', 'image/jp2', 'image/gif', 'image/png'];\n      var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);\n      var headers = {\n        Accept: acceptHeaderFieldValue\n      };\n      var responseType = 'arraybuffer';\n      return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback, withCredentials);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a message with a text\n     media type.\n     *\n     * @param {String} url\n     * @param {Object[]} mediaTypes\n     * @param {Object} params\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGetText\",\n    value: function _httpGetText(url, mediaTypes) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var progressCallback = arguments.length > 3 ? arguments[3] : undefined;\n      var withCredentials = arguments.length > 4 ? arguments[4] : undefined;\n      var urlWithQueryParams = url;\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n      var supportedMediaTypes = ['text/', 'text/*', 'text/html', 'text/plain', 'text/rtf', 'text/xml'];\n      var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);\n      var headers = {\n        Accept: acceptHeaderFieldValue\n      };\n      var responseType = 'arraybuffer';\n      return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback, withCredentials);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a message with a video\n     media type.\n     *\n     * @param {String} url\n     * @param {Object[]} mediaTypes\n     * @param {Object} params\n     * @param {Function} progressCallback\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_httpGetVideo\",\n    value: function _httpGetVideo(url, mediaTypes) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var progressCallback = arguments.length > 3 ? arguments[3] : undefined;\n      var withCredentials = arguments.length > 4 ? arguments[4] : undefined;\n      var urlWithQueryParams = url;\n      if (_typeof(params) === 'object') {\n        if (!isEmptyObject(params)) {\n          urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n        }\n      }\n      var supportedMediaTypes = ['video/', 'video/*', 'video/mpeg', 'video/mp4', 'video/H265'];\n      var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);\n      var headers = {\n        Accept: acceptHeaderFieldValue\n      };\n      var responseType = 'arraybuffer';\n      return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback, withCredentials);\n    }\n    /**\n     * Asserts that a given media type is valid.\n     *\n     * @params {String} mediaType media type\n     */\n  }, {\n    key: \"_httpGetMultipartImage\",\n    /**\n     * Performs an HTTP GET request that accepts a multipart message with an image media type.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @param {Array} byteRange - Start and end of byte range\n     * @param {Object} params - Additional HTTP GET query parameters\n     * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n     * @param {Function} progressCallback\n     * @private\n     * @returns {Promise<Array>} Content of HTTP message body parts\n     */\n    value: function _httpGetMultipartImage(url, mediaTypes, byteRange, params) {\n      var rendered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var progressCallback = arguments.length > 5 ? arguments[5] : undefined;\n      var withCredentials = arguments.length > 6 ? arguments[6] : undefined;\n      var headers = {};\n      var supportedMediaTypes;\n      if (rendered) {\n        supportedMediaTypes = ['image/jpeg', 'image/gif', 'image/png', 'image/jp2'];\n      } else {\n        supportedMediaTypes = {\n          '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n          '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n          '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n          '1.2.840.10008.1.2.4.90': ['image/jp2'],\n          '1.2.840.10008.1.2.4.91': ['image/jp2'],\n          '1.2.840.10008.1.2.4.92': ['image/jpx'],\n          '1.2.840.10008.1.2.4.93': ['image/jpx']\n        };\n        if (byteRange) {\n          headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n        }\n      }\n      headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials).then(multipartDecode);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a multipart message with a video media type.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @param {Array} byteRange - Start and end of byte range\n     * @param {Object} params - Additional HTTP GET query parameters\n     * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n     * @param {Function} progressCallback\n     * @private\n     * @returns {Promise<Array>} Content of HTTP message body parts\n     */\n  }, {\n    key: \"_httpGetMultipartVideo\",\n    value: function _httpGetMultipartVideo(url, mediaTypes, byteRange, params) {\n      var rendered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var progressCallback = arguments.length > 5 ? arguments[5] : undefined;\n      var withCredentials = arguments.length > 6 ? arguments[6] : undefined;\n      var headers = {};\n      var supportedMediaTypes;\n      if (rendered) {\n        supportedMediaTypes = ['video/', 'video/*', 'video/mpeg2', 'video/mp4', 'video/H265'];\n      } else {\n        supportedMediaTypes = {\n          '1.2.840.10008.1.2.4.100': ['video/mpeg2'],\n          '1.2.840.10008.1.2.4.101': ['video/mpeg2'],\n          '1.2.840.10008.1.2.4.102': ['video/mp4'],\n          '1.2.840.10008.1.2.4.103': ['video/mp4'],\n          '1.2.840.10008.1.2.4.104': ['video/mp4'],\n          '1.2.840.10008.1.2.4.105': ['video/mp4'],\n          '1.2.840.10008.1.2.4.106': ['video/mp4']\n        };\n        if (byteRange) {\n          headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n        }\n      }\n      headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials).then(multipartDecode);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a multipart message\n     * with a application/dicom media type.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @param {Object} params - Additional HTTP GET query parameters\n     * @param {Function} progressCallback\n     * @private\n     * @returns {Promise<Array>} Content of HTTP message body parts\n     */\n  }, {\n    key: \"_httpGetMultipartApplicationDicom\",\n    value: function _httpGetMultipartApplicationDicom(url, mediaTypes, params, progressCallback, withCredentials) {\n      var headers = {};\n      var defaultMediaType = 'application/dicom';\n      var supportedMediaTypes = {\n        '1.2.840.10008.1.2.1': [defaultMediaType],\n        '1.2.840.10008.1.2.5': [defaultMediaType],\n        '1.2.840.10008.1.2.4.50': [defaultMediaType],\n        '1.2.840.10008.1.2.4.51': [defaultMediaType],\n        '1.2.840.10008.1.2.4.57': [defaultMediaType],\n        '1.2.840.10008.1.2.4.70': [defaultMediaType],\n        '1.2.840.10008.1.2.4.80': [defaultMediaType],\n        '1.2.840.10008.1.2.4.81': [defaultMediaType],\n        '1.2.840.10008.1.2.4.90': [defaultMediaType],\n        '1.2.840.10008.1.2.4.91': [defaultMediaType],\n        '1.2.840.10008.1.2.4.92': [defaultMediaType],\n        '1.2.840.10008.1.2.4.93': [defaultMediaType],\n        '1.2.840.10008.1.2.4.100': [defaultMediaType],\n        '1.2.840.10008.1.2.4.101': [defaultMediaType],\n        '1.2.840.10008.1.2.4.102': [defaultMediaType],\n        '1.2.840.10008.1.2.4.103': [defaultMediaType],\n        '1.2.840.10008.1.2.4.104': [defaultMediaType],\n        '1.2.840.10008.1.2.4.105': [defaultMediaType],\n        '1.2.840.10008.1.2.4.106': [defaultMediaType]\n      };\n      var acceptableMediaTypes = mediaTypes;\n      if (!mediaTypes) {\n        acceptableMediaTypes = [{\n          mediaType: defaultMediaType\n        }];\n      }\n      headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(acceptableMediaTypes, supportedMediaTypes);\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials).then(multipartDecode);\n    }\n    /**\n     * Performs an HTTP GET request that accepts a multipart message\n     * with a application/octet-stream media type.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @param {Array} byteRange start and end of byte range\n     * @param {Object} params - Additional HTTP GET query parameters\n     * @param {Function} progressCallback\n     * @private\n     * @returns {Promise<Array>} Content of HTTP message body parts\n     */\n  }, {\n    key: \"_httpGetMultipartApplicationOctetStream\",\n    value: function _httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange, params, progressCallback, withCredentials) {\n      var headers = {};\n      var defaultMediaType = 'application/octet-stream';\n      var supportedMediaTypes = {\n        '1.2.840.10008.1.2.1': [defaultMediaType]\n      };\n      var acceptableMediaTypes = mediaTypes;\n      if (!mediaTypes) {\n        acceptableMediaTypes = [{\n          mediaType: defaultMediaType\n        }];\n      }\n      if (byteRange) {\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n      }\n      headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(acceptableMediaTypes, supportedMediaTypes);\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials).then(multipartDecode);\n    }\n    /**\n     * Performs an HTTP POST request.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object} headers - HTTP header fields\n     * @param {Array} data - Data that should be stored\n     * @param {Function} progressCallback\n     * @param {Function} progressCallback\n     * @param {XMLHttpRequest} request - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n     * @private\n     * @returns {Promise} Response\n     */\n  }, {\n    key: \"_httpPost\",\n    value: function _httpPost(url, headers, data, progressCallback, withCredentials, request) {\n      return this._httpRequest(url, 'post', headers, {\n        data: data,\n        progressCallback: progressCallback,\n        withCredentials: withCredentials,\n        request: request\n      });\n    }\n    /**\n     * Performs an HTTP POST request with content-type application/dicom+json.\n     *\n     * @param {String} url - Unique resource locator\n     * @param {Object} headers - HTTP header fields\n     * @param {Array} data - Data that should be stored\n     * @param {Function} progressCallback\n     * @private\n     * @returns {Promise} Response\n     */\n  }, {\n    key: \"_httpPostApplicationJson\",\n    value: function _httpPostApplicationJson(url, data, progressCallback, withCredentials) {\n      var headers = {\n        'Content-Type': MEDIATYPES.DICOM_JSON\n      };\n      return this._httpPost(url, headers, data, progressCallback, withCredentials);\n    }\n    /**\n     * Parses media type and extracts its type and subtype.\n     *\n     * @param {String} mediaType - HTTP media type (e.g. image/jpeg)\n     * @private\n     * @returns {String[]} Media type and subtype\n     */\n  }, {\n    key: \"searchForStudies\",\n    /**\n     * Searches for DICOM studies.\n     *\n     * @param {Object} options\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @return {Object[]} Study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n     */\n    value: function searchForStudies() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      console.log('search for studies');\n      var withCredentials = false;\n      var url = \"\".concat(this.qidoURL, \"/studies\");\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /**\n     * Retrieves metadata for a DICOM study.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                        belonging to the study\n     */\n  }, {\n    key: \"retrieveStudyMetadata\",\n    value: function retrieveStudyMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of study metadata');\n      }\n      console.log(\"retrieve metadata of study \".concat(options.studyInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/metadata\");\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /**\n     * Searches for DICOM series.\n     *\n     * @param {Object} options\n     * @param {Object} [options.studyInstanceUID] - Study Instance UID\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {Object[]} Series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n     */\n  }, {\n    key: \"searchForSeries\",\n    value: function searchForSeries() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var url = this.qidoURL;\n      if ('studyInstanceUID' in options) {\n        console.log(\"search series of study \".concat(options.studyInstanceUID));\n        url += \"/studies/\".concat(options.studyInstanceUID);\n      }\n      url += '/series';\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /**\n     * Retrieves metadata for a DICOM series.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                        belonging to the series\n     */\n  }, {\n    key: \"retrieveSeriesMetadata\",\n    value: function retrieveSeriesMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of series metadata');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of series metadata');\n      }\n      console.log(\"retrieve metadata of series \".concat(options.seriesInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/metadata\");\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /**\n     * Searches for DICOM Instances.\n     *\n     * @param {Object} options\n     * @param {String} [options.studyInstanceUID] - Study Instance UID\n     * @param {String} [options.seriesInstanceUID] - Series Instance UID\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {Object[]} Instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n     */\n  }, {\n    key: \"searchForInstances\",\n    value: function searchForInstances() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var url = this.qidoURL;\n      var withCredentials = false;\n      if ('studyInstanceUID' in options) {\n        url += \"/studies/\".concat(options.studyInstanceUID);\n        if ('seriesInstanceUID' in options) {\n          console.log(\"search for instances of series \".concat(options.seriesInstanceUID));\n          url += \"/series/\".concat(options.seriesInstanceUID);\n        } else {\n          console.log(\"search for instances of study \".concat(options.studyInstanceUID));\n        }\n      } else {\n        console.log('search for instances');\n      }\n      url += '/instances';\n      if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n      }\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /** Returns a WADO-URI URL for an instance\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @returns {String} WADO-URI URL\n     */\n  }, {\n    key: \"buildInstanceWadoURIUrl\",\n    value: function buildInstanceWadoURIUrl(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required.');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required.');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required.');\n      }\n      var contentType = options.contentType || MEDIATYPES.DICOM;\n      var transferSyntax = options.transferSyntax || '*';\n      var params = [];\n      params.push('requestType=WADO');\n      params.push(\"studyUID=\".concat(options.studyInstanceUID));\n      params.push(\"seriesUID=\".concat(options.seriesInstanceUID));\n      params.push(\"objectUID=\".concat(options.sopInstanceUID));\n      params.push(\"contentType=\".concat(contentType));\n      params.push(\"transferSyntax=\".concat(transferSyntax));\n      var paramString = params.join('&');\n      return \"\".concat(this.wadoURL, \"?\").concat(paramString);\n    }\n    /**\n     * Retrieves metadata for a DICOM Instance.\n     *\n     * @param {Object} options object\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @returns {Promise<InstanceMetadata>} metadata elements in DICOM JSON format\n     */\n  }, {\n    key: \"retrieveInstanceMetadata\",\n    value: function retrieveInstanceMetadata(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance metadata');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance metadata');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance metadata');\n      }\n      console.log(\"retrieve metadata of instance \".concat(options.sopInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/metadata\");\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      return this._httpGetApplicationJson(url, {}, false, withCredentials);\n    }\n    /**\n     * Retrieves frames for a DICOM Instance.\n     * @param {Object} options options object\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\n     * @returns {Array} frame items as byte arrays of the pixel data element\n     */\n  }, {\n    key: \"retrieveInstanceFrames\",\n    value: function retrieveInstanceFrames(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\n      }\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of instance frames');\n      }\n      console.log(\"retrieve frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/frames/\").concat(options.frameNumbers.toString());\n      var mediaTypes = options.mediaTypes;\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        return this._httpGetMultipartApplicationOctetStream(url, false, false, false, progressCallback, withCredentials);\n      }\n      var sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n      if (sharedMediaTypes.length > 1) {\n        /**\n         * Enable request of frames that are stored either compressed\n         * (image/* media type) or uncompressed (application/octet-stream\n         * media type).\n         */\n        var supportedMediaTypes = {\n          '1.2.840.10008.1.2.1': ['application/octet-stream'],\n          '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n          '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n          '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n          '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n          '1.2.840.10008.1.2.4.90': ['image/jp2'],\n          '1.2.840.10008.1.2.4.91': ['image/jp2'],\n          '1.2.840.10008.1.2.4.92': ['image/jpx'],\n          '1.2.840.10008.1.2.4.93': ['image/jpx']\n        };\n        var headers = {\n          Accept: DICOMwebClient._buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes)\n        };\n        return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials).then(multipartDecode);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType.startsWith('application')) {\n        return this._httpGetMultipartApplicationOctetStream(url, mediaTypes, false, false, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetMultipartImage(url, mediaTypes, false, false, false, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('video')) {\n        return this._httpGetMultipartVideo(url, mediaTypes, false, false, false, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported for retrieval of frames.\"));\n    }\n    /**\n     * Retrieves an individual, server-side rendered DICOM Instance.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String[]} [options.mediaType] - Acceptable HTTP media types\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {Promise<ArrayBuffer>} Rendered DICOM Instance\n     */\n  }, {\n    key: \"retrieveInstanceRendered\",\n    value: function retrieveInstanceRendered(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of rendered instance');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of rendered instance');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of rendered instance');\n      }\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/rendered\");\n      var mediaTypes = options.mediaTypes,\n        queryParams = options.queryParams;\n      var headers = {};\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        var responseType = 'arraybuffer';\n        if (queryParams) {\n          url += DICOMwebClient._parseQueryParameters(queryParams);\n        }\n        return this._httpGet(url, headers, responseType, progressCallback, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetImage(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('video')) {\n        return this._httpGetVideo(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('text')) {\n        return this._httpGetText(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      if (commonMediaType === MEDIATYPES.PDF) {\n        return this._httpGetApplicationPdf(url, queryParams, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported \") + 'for retrieval of rendered instance.');\n    }\n    /**\n     * Retrieves a thumbnail of an DICOM Instance.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String[]} [options.mediaType] - Acceptable HTTP media types\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {ArrayBuffer} Thumbnail\n     */\n  }, {\n    key: \"retrieveInstanceThumbnail\",\n    value: function retrieveInstanceThumbnail(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of rendered instance');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of rendered instance');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of rendered instance');\n      }\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/thumbnail\");\n      var mediaTypes = options.mediaTypes,\n        queryParams = options.queryParams;\n      var headers = {};\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        var responseType = 'arraybuffer';\n        if (queryParams) {\n          url += DICOMwebClient._parseQueryParameters(queryParams);\n        }\n        return this._httpGet(url, headers, responseType, progressCallback, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetImage(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported \") + 'for retrieval of rendered instance.');\n    }\n    /**\n     * Retrieves rendered frames for a DICOM Instance.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\n     * @param {String[]} [options.mediaType] - Acceptable HTTP media types\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n     */\n  }, {\n    key: \"retrieveInstanceFramesRendered\",\n    value: function retrieveInstanceFramesRendered(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of rendered instance frames');\n      }\n      console.debug(\"retrieve rendered frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/frames/\").concat(options.frameNumbers.toString(), \"/rendered\");\n      var mediaTypes = options.mediaTypes,\n        queryParams = options.queryParams;\n      var headers = {};\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        var responseType = 'arraybuffer';\n        if (queryParams) {\n          url += DICOMwebClient._parseQueryParameters(queryParams);\n        }\n        return this._httpGet(url, headers, responseType, false, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetImage(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('video')) {\n        return this._httpGetVideo(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported \") + 'for retrieval of rendered frame.');\n    }\n    /**\n     * Retrieves thumbnail of frames for a DICOM Instance.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n     */\n  }, {\n    key: \"retrieveInstanceFramesThumbnail\",\n    value: function retrieveInstanceFramesThumbnail(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of rendered instance frames');\n      }\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of rendered instance frames');\n      }\n      console.debug(\"retrieve rendered frames \".concat(options.frameNumbers.toString(), \" of instance \").concat(options.sopInstanceUID));\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID, \"/frames/\").concat(options.frameNumbers.toString(), \"/thumbnail\");\n      var mediaTypes = options.mediaTypes,\n        queryParams = options.queryParams;\n      var headers = {};\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        var responseType = 'arraybuffer';\n        if (queryParams) {\n          url += DICOMwebClient._parseQueryParameters(queryParams);\n        }\n        return this._httpGet(url, headers, responseType, progressCallback, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetImage(url, mediaTypes, queryParams, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported \") + 'for retrieval of rendered frame.');\n    }\n    /**\n     * Retrieves a DICOM Instance.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @returns {Promise<ArrayBuffer>} DICOM Part 10 file as Arraybuffer\n     */\n  }, {\n    key: \"retrieveInstance\",\n    value: function retrieveInstance(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required');\n      }\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID, \"/instances/\").concat(options.sopInstanceUID);\n      var mediaTypes = options.mediaTypes;\n      var _options$withCredenti = options.withCredentials,\n        withCredentials = _options$withCredenti === void 0 ? false : _options$withCredenti;\n      var _options$progressCall = options.progressCallback,\n        progressCallback = _options$progressCall === void 0 ? false : _options$progressCall;\n      if (!mediaTypes) {\n        return this._httpGetMultipartApplicationDicom(url, false, false, progressCallback, withCredentials).then(getFirstResult);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType === MEDIATYPES.DICOM) {\n        return this._httpGetMultipartApplicationDicom(url, mediaTypes, false, progressCallback, withCredentials).then(getFirstResult);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported for retrieval of instance.\"));\n    }\n    /**\n     * Retrieves all DICOM Instances of a Series.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {Function} options.progressCallback\n     * @returns {Promise<ArrayBuffer[]>} DICOM Instances\n     */\n  }, {\n    key: \"retrieveSeries\",\n    value: function retrieveSeries(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required');\n      }\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID, \"/series/\").concat(options.seriesInstanceUID);\n      var mediaTypes = options.mediaTypes;\n      var withCredentials = false;\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          withCredentials = options.withCredentials;\n        }\n      }\n      var progressCallback = false;\n      if ('progressCallback' in options) {\n        progressCallback = options.progressCallback;\n      }\n      if (!mediaTypes) {\n        return this._httpGetMultipartApplicationDicom(url, false, false, progressCallback, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType === MEDIATYPES.DICOM) {\n        return this._httpGetMultipartApplicationDicom(url, mediaTypes, false, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported for retrieval of series.\"));\n    }\n    /**\n     * Retrieves all DICOM Instances of a Study.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @returns {ArrayBuffer[]} DICOM Instances\n     */\n  }, {\n    key: \"retrieveStudy\",\n    value: function retrieveStudy(options) {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required');\n      }\n      var url = \"\".concat(this.wadoURL, \"/studies/\").concat(options.studyInstanceUID);\n      var mediaTypes = options.mediaTypes;\n      var _options$withCredenti2 = options.withCredentials,\n        withCredentials = _options$withCredenti2 === void 0 ? false : _options$withCredenti2;\n      var _options$progressCall2 = options.progressCallback,\n        progressCallback = _options$progressCall2 === void 0 ? false : _options$progressCall2;\n      if (!mediaTypes) {\n        return this._httpGetMultipartApplicationDicom(url, false, false, progressCallback, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType === MEDIATYPES.DICOM) {\n        return this._httpGetMultipartApplicationDicom(url, mediaTypes, false, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported for retrieval of study.\"));\n    }\n    /**\n     * Retrieves and parses BulkData from a BulkDataURI location.\n     * Decodes the multipart encoded data and returns the resulting data\n     * as an ArrayBuffer.\n     *\n     * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n     *\n     * @param {Object} options\n     * @param {String} BulkDataURI - URI for retrieval of bulkdata\n     * @returns {Promise<Array>} Bulkdata parts\n     */\n  }, {\n    key: \"retrieveBulkData\",\n    value: function retrieveBulkData(options) {\n      if (!('BulkDataURI' in options)) {\n        throw new Error('BulkDataURI is required.');\n      }\n      var url = options.BulkDataURI;\n      var mediaTypes = options.mediaTypes,\n        byteRange = options.byteRange;\n      var _options$withCredenti3 = options.withCredentials,\n        withCredentials = _options$withCredenti3 === void 0 ? false : _options$withCredenti3;\n      var _options$progressCall3 = options.progressCallback,\n        progressCallback = _options$progressCall3 === void 0 ? false : _options$progressCall3;\n      if (!mediaTypes) {\n        return this._httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange, false, false, withCredentials);\n      }\n      var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n      if (commonMediaType === MEDIATYPES.OCTET_STREAM) {\n        return this._httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange, false, progressCallback, withCredentials);\n      }\n      if (commonMediaType.startsWith('image')) {\n        return this._httpGetMultipartImage(url, mediaTypes, byteRange, false, false, progressCallback, withCredentials);\n      }\n      throw new Error(\"Media type \".concat(commonMediaType, \" is not supported for retrieval of bulk data.\"));\n    }\n    /**\n     * Stores DICOM Instances.\n     *\n     * @param {Object} options\n     * @param {ArrayBuffer[]} options.datasets - DICOM Instances in PS3.10 format\n     * @param {String} [options.studyInstanceUID] - Study Instance UID\n     * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n     * @returns {Promise} Response message\n     */\n  }, {\n    key: \"storeInstances\",\n    value: function storeInstances(options) {\n      if (!('datasets' in options)) {\n        throw new Error('datasets are required for storing');\n      }\n      var url = \"\".concat(this.stowURL, \"/studies\");\n      if ('studyInstanceUID' in options) {\n        url += \"/\".concat(options.studyInstanceUID);\n      }\n      var _multipartEncode = multipartEncode(options.datasets),\n        data = _multipartEncode.data,\n        boundary = _multipartEncode.boundary;\n      var headers = {\n        'Content-Type': \"multipart/related; type=\\\"application/dicom\\\"; boundary=\\\"\".concat(boundary, \"\\\"\")\n      };\n      var _options$withCredenti4 = options.withCredentials,\n        withCredentials = _options$withCredenti4 === void 0 ? false : _options$withCredenti4;\n      return this._httpPost(url, headers, data, options.progressCallback, withCredentials, options.request);\n    }\n  }], [{\n    key: \"_parseQueryParameters\",\n    value: function _parseQueryParameters() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var queryString = '?';\n      Object.keys(params).forEach(function (key, index) {\n        if (index !== 0) {\n          queryString += '&';\n        }\n        queryString += \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]));\n      });\n      return queryString;\n    }\n  }, {\n    key: \"_assertMediaTypeIsValid\",\n    value: function _assertMediaTypeIsValid(mediaType) {\n      if (!mediaType) {\n        throw new Error(\"Not a valid media type: \".concat(mediaType));\n      }\n      var sepIndex = mediaType.indexOf('/');\n      if (sepIndex === -1) {\n        throw new Error(\"Not a valid media type: \".concat(mediaType));\n      }\n      var mediaTypeType = mediaType.slice(0, sepIndex);\n      var types = ['application', 'image', 'text', 'video'];\n      if (!types.includes(mediaTypeType)) {\n        throw new Error(\"Not a valid media type: \".concat(mediaType));\n      }\n      if (mediaType.slice(sepIndex + 1).includes('/')) {\n        throw new Error(\"Not a valid media type: \".concat(mediaType));\n      }\n    }\n  }, {\n    key: \"_parseMediaType\",\n    value: function _parseMediaType(mediaType) {\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\n      return mediaType.split('/');\n    }\n    /**\n     * Builds an accept header field value for HTTP GET request messages.\n     *\n     * @param {Object[]} mediaTypes - Acceptable media types\n     * @param {Object[]} supportedMediaTypes - Supported media types\n     * @return {*}\n     * @private\n     */\n  }, {\n    key: \"_buildAcceptHeaderFieldValue\",\n    value: function _buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {\n      if (!Array.isArray(mediaTypes)) {\n        throw new Error('Acceptable media types must be provided as an Array');\n      }\n      var fieldValueParts = mediaTypes.map(function (item) {\n        var mediaType = item.mediaType;\n        DICOMwebClient._assertMediaTypeIsValid(mediaType);\n        if (!supportedMediaTypes.includes(mediaType)) {\n          throw new Error(\"Media type \".concat(mediaType, \" is not supported for requested resource\"));\n        }\n        return mediaType;\n      });\n      return fieldValueParts.join(', ');\n    }\n    /**\n       * Builds an accept header field value for HTTP GET multipart request\n       messages.\n       *\n       * @param {Object[]} mediaTypes - Acceptable media types\n       * @param {Object[]} supportedMediaTypes - Supported media types\n       * @private\n       */\n  }, {\n    key: \"_buildMultipartAcceptHeaderFieldValue\",\n    value: function _buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {\n      if (!Array.isArray(mediaTypes)) {\n        throw new Error('Acceptable media types must be provided as an Array');\n      }\n      if (!Array.isArray(supportedMediaTypes) && !isObject(supportedMediaTypes)) {\n        throw new Error('Supported media types must be provided as an Array or an Object');\n      }\n      var fieldValueParts = [];\n      mediaTypes.forEach(function (item) {\n        var transferSyntaxUID = item.transferSyntaxUID,\n          mediaType = item.mediaType;\n        DICOMwebClient._assertMediaTypeIsValid(mediaType);\n        var fieldValue = \"multipart/related; type=\\\"\".concat(mediaType, \"\\\"\");\n        if (isObject(supportedMediaTypes)) {\n          // SupportedMediaTypes is a lookup table that maps Transfer Syntax UID\n          // to one or more Media Types\n          if (!Object.values(supportedMediaTypes).flat(1).includes(mediaType)) {\n            if (!mediaType.endsWith('/*') || !mediaType.endsWith('/')) {\n              throw new Error(\"Media type \".concat(mediaType, \" is not supported for requested resource\"));\n            }\n          }\n          if (transferSyntaxUID) {\n            if (transferSyntaxUID !== '*') {\n              if (!Object.keys(supportedMediaTypes).includes(transferSyntaxUID)) {\n                throw new Error(\"Transfer syntax \".concat(transferSyntaxUID, \" is not supported for requested resource\"));\n              }\n              var expectedMediaTypes = supportedMediaTypes[transferSyntaxUID];\n              if (!expectedMediaTypes.includes(mediaType)) {\n                var actualType = DICOMwebClient._parseMediaType(mediaType)[0];\n                expectedMediaTypes.map(function (expectedMediaType) {\n                  var expectedType = DICOMwebClient._parseMediaType(expectedMediaType)[0];\n                  var haveSameType = actualType === expectedType;\n                  if (haveSameType && (mediaType.endsWith('/*') || mediaType.endsWith('/'))) {\n                    return;\n                  }\n                  throw new Error(\"Transfer syntax \".concat(transferSyntaxUID, \" is not supported for requested resource\"));\n                });\n              }\n            }\n            fieldValue += \"; transfer-syntax=\".concat(transferSyntaxUID);\n          }\n        } else if (Array.isArray(supportedMediaTypes) && !supportedMediaTypes.includes(mediaType)) {\n          throw new Error(\"Media type \".concat(mediaType, \" is not supported for requested resource\"));\n        }\n        fieldValueParts.push(fieldValue);\n      });\n      return fieldValueParts.join(', ');\n    }\n    /**\n     * Builds a range header field value for HTTP GET request messages.\n     *\n     * @param {Array} byteRange - Start and end of byte range\n     * @returns {String} Range header field value\n     * @private\n     */\n  }, {\n    key: \"_buildRangeHeaderFieldValue\",\n    value: function _buildRangeHeaderFieldValue() {\n      var byteRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (byteRange.length === 1) {\n        return \"bytes=\".concat(byteRange[0], \"-\");\n      }\n      if (byteRange.length === 2) {\n        return \"bytes=\".concat(byteRange[0], \"-\").concat(byteRange[1]);\n      }\n      return 'bytes=0-';\n    }\n    /**\n     * Gets types that are shared among acceptable media types.\n     *\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @private\n     * @returns {String[]} Types that are shared among acceptable media types\n     */\n  }, {\n    key: \"_getSharedMediaTypes\",\n    value: function _getSharedMediaTypes(mediaTypes) {\n      var types = new Set();\n      if (!mediaTypes || !mediaTypes.length) {\n        return types;\n      }\n      mediaTypes.forEach(function (item) {\n        var mediaType = item.mediaType;\n        var type = DICOMwebClient._parseMediaType(mediaType)[0];\n        types.add(\"\".concat(type, \"/\"));\n      });\n      return Array.from(types);\n    }\n    /**\n     * Gets common type of acceptable media types and asserts that only\n     one type is specified. For example, ``(\"image/jpeg\", \"image/jp2\")``\n     will pass, but ``(\"image/jpeg\", \"video/mpeg2\")`` will raise an\n     exception.\n     *\n     * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n     corresponding transfer syntaxes\n     * @private\n     * @returns {String[]} Common media type\n     */\n  }, {\n    key: \"_getCommonMediaType\",\n    value: function _getCommonMediaType(mediaTypes) {\n      if (!mediaTypes || !mediaTypes.length) {\n        throw new Error('No acceptable media types provided');\n      }\n      var sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n      if (sharedMediaTypes.length === 0) {\n        throw new Error('No common acceptable media type could be identified.');\n      } else if (sharedMediaTypes.length > 1) {\n        throw new Error('Acceptable media types must have the same type.');\n      }\n      return sharedMediaTypes[0];\n    }\n  }]);\n  return DICOMwebClient;\n}();\n\nfunction findSubstring(str, before, after) {\n  var beforeIndex = str.lastIndexOf(before) + before.length;\n  if (beforeIndex < before.length) {\n    return null;\n  }\n  if (after !== undefined) {\n    var afterIndex = str.lastIndexOf(after);\n    if (afterIndex < 0) {\n      return null;\n    }\n    return str.substring(beforeIndex, afterIndex);\n  }\n  return str.substring(beforeIndex);\n}\nfunction getStudyInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, 'studies/', '/series');\n  if (!uid) {\n    uid = findSubstring(uri, 'studies/');\n  }\n  if (!uid) {\n    console.debug(\"Study Instance UID could not be dertermined from URI \\\"\".concat(uri, \"\\\"\"));\n  }\n  return uid;\n}\nfunction getSeriesInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, 'series/', '/instances');\n  if (!uid) {\n    uid = findSubstring(uri, 'series/');\n  }\n  if (!uid) {\n    console.debug(\"Series Instance UID could not be dertermined from URI \\\"\".concat(uri, \"\\\"\"));\n  }\n  return uid;\n}\nfunction getSOPInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, '/instances/', '/frames');\n  if (!uid) {\n    uid = findSubstring(uri, '/instances/', '/metadata');\n  }\n  if (!uid) {\n    uid = findSubstring(uri, '/instances/');\n  }\n  if (!uid) {\n    console.debug(\"SOP Instance UID could not be dertermined from URI\\\"\".concat(uri, \"\\\"\"));\n  }\n  return uid;\n}\nfunction getFrameNumbersFromUri(uri) {\n  var numbers = findSubstring(uri, '/frames/', '/rendered');\n  if (!numbers) {\n    numbers = findSubstring(uri, '/frames/');\n  }\n  if (numbers === undefined) {\n    console.debug(\"Frame Numbers could not be dertermined from URI\\\"\".concat(uri, \"\\\"\"));\n  }\n  return numbers.split(',');\n}\n\nvar version = '0.5.2';\n\nvar api = {\n  DICOMwebClient: DICOMwebClient\n};\nvar utils = {\n  getStudyInstanceUIDFromUri: getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri: getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri: getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri: getFrameNumbersFromUri\n};\n\nexport { api, utils, version };\n//# sourceMappingURL=dicomweb-client.es.js.map\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","stringToUint8Array","str","arr","Uint8Array","j","charCodeAt","containsToken","message","token","offset","arguments","index","findToken","maxSearchLength","searchLength","Math","min","multipartEncode","datasets","boundary","s4","floor","random","toString","substring","concat","guid","contentTypeString","header","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","separator","headerIndex","Error","itemLimit","fromCharCode","uint8ArrayToString","boundaryString","parts","split","substr","identifyBoundary","boundaryIndex","boundaryLength","components","headerTokenIndex","slice","push","isObject","isEmptyObject","keys","getFirstResult","result","MEDIATYPES","api","DICOMwebClient","options","instance","Constructor","_classCallCheck","this","baseURL","url","console","error","username","password","log","qidoURLPrefix","qidoURL","wadoURLPrefix","wadoURL","stowURLPrefix","stowURL","requestHooks","headers","errorInterceptor","verbose","protoProps","staticProps","value","method","_this","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","setRequestHeader","functions","userHeaders","onloadstart","onloadend","onreadystatechange","readyState","status","warn","progressCallback","onprogress","isValid","Array","isArray","every","requestHook","areValidRequestHooks","combinedHeaders","assign","metadata","pipedRequest","args","reduce","fn","withCredentials","send","_httpRequest","params","urlWithQueryParams","_parseQueryParameters","Accept","_httpGet","mediaTypes","_buildAcceptHeaderFieldValue","byteRange","supportedMediaTypes","Range","_buildRangeHeaderFieldValue","_buildMultipartAcceptHeaderFieldValue","then","defaultMediaType","acceptableMediaTypes","mediaType","_httpPost","queryParams","_httpGetApplicationJson","studyInstanceUID","seriesInstanceUID","contentType","transferSyntax","sopInstanceUID","paramString","join","frameNumbers","_httpGetMultipartApplicationOctetStream","_getSharedMediaTypes","commonMediaType","_getCommonMediaType","startsWith","_httpGetMultipartImage","_httpGetMultipartVideo","_httpGetImage","_httpGetVideo","_httpGetText","_httpGetApplicationPdf","debug","_options$withCredenti","_options$progressCall","_httpGetMultipartApplicationDicom","_options$withCredenti2","_options$progressCall2","BulkDataURI","_options$withCredenti3","_options$progressCall3","_multipartEncode","_options$withCredenti4","queryString","encodeURIComponent","sepIndex","indexOf","mediaTypeType","includes","_assertMediaTypeIsValid","item","fieldValueParts","transferSyntaxUID","fieldValue","values","flat","endsWith","expectedMediaTypes","actualType","_parseMediaType","expectedMediaType","expectedType","types","Set","type","add","from","sharedMediaTypes"],"sourceRoot":""}