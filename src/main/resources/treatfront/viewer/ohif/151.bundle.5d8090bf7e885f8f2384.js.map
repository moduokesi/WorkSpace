{"version":3,"file":"151.bundle.5d8090bf7e885f8f2384.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/calculate-suv/dist/calculate-suv.esm.js","webpack:///../../../node_modules/react-window/dist/index.esm.js"],"sourcesContent":["/**\r\n * Javascript object that handles dates and compute the time.\r\n *\r\n * @export\r\n * @class FullDateInterface\r\n */\nclass FullDateInterface {\n  /**\r\n   * Creates an instance of FullDateInterface.\r\n   * @param {string} date formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\r\n   * @memberof FullDateInterface\r\n   */\n  constructor(date) {\n    this.fullDate = date;\n  }\n  /**\r\n   * returns time since 1 january 1970\r\n   *\r\n   * @returns {number} time in sec\r\n   * @memberof FullDateInterface\r\n   */\n\n\n  getTimeInSec() {\n    // yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n    const dateString = this.fullDate.substring(0, 10);\n    const timeString = this.fullDate.substring(11, 28); // yyyy-mm-dd\n\n    const yyyy = parseInt(dateString.substring(0, 4), 10);\n    const mm = dateString.length >= 7 ? parseInt(dateString.substring(5, 7), 10) : undefined;\n    const dd = dateString.length >= 10 ? parseInt(dateString.substring(8, 10), 10) : undefined;\n\n    if (isNaN(yyyy) || mm !== undefined && isNaN(mm) || dd !== undefined && isNaN(dd) || yyyy > 3000 || mm && (mm < 1 || mm > 12) || dd && (dd < 1 || dd > 31)) {\n      throw new Error(`invalid date '${dateString}'`);\n    }\n\n    const dateJS = new Date(`${dateString}T00:00:00.000000Z`); // HHMMSS.FFFFFF\n\n    const HH = parseInt(timeString.substring(0, 2), 10);\n    const MM = timeString.length >= 5 ? parseInt(timeString.substring(3, 5), 10) : undefined;\n    const SS = timeString.length >= 8 ? parseInt(timeString.substring(6, 8), 10) : undefined;\n    const fractionalStr = timeString.substring(9, 15);\n    const FFFFFF = fractionalStr ? parseInt(fractionalStr, 10) * Math.pow(10, -fractionalStr.length) : undefined;\n\n    if (isNaN(HH) || MM !== undefined && isNaN(MM) || SS !== undefined && isNaN(SS) || FFFFFF !== undefined && isNaN(FFFFFF) || HH < 0 || HH > 23 || MM && (MM < 0 || MM > 59) || SS && (SS < 0 || SS > 59) || FFFFFF && (FFFFFF < 0 || FFFFFF > 999999)) {\n      throw new Error(`invalid time '${timeString}'`);\n    }\n\n    let timeInSec = dateJS.getTime() / 1000;\n    timeInSec += HH * 3600;\n\n    if (MM !== undefined) {\n      timeInSec += MM * 60;\n    }\n\n    if (SS !== undefined) {\n      timeInSec += SS;\n    }\n\n    if (FFFFFF !== undefined) {\n      timeInSec += FFFFFF;\n    }\n\n    return timeInSec;\n  }\n  /**\r\n   * returns time since 1 january 1970\r\n   *\r\n   * @returns {number} time in microsec\r\n   * @memberof FullDateInterface\r\n   */\n\n\n  getTimeInMicroSec() {\n    const timeInMicroSec = this.getTimeInSec() * 1e6;\n    return timeInMicroSec;\n  }\n\n}\n/**\r\n * Combines two javascript objects containing the date and time information\r\n *\r\n * @export\r\n * @param {DateInterface} date\r\n * @param {TimeInterface} time\r\n * @returns {FullDateInterface}\r\n */\n\nfunction combineDateTime(date, time) {\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\n  const month = `${date.month}`.padStart(2, '0');\n  const day = `${date.day}`.padStart(2, '0');\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(6, '0');\n  const dateString = `${date.year}-${month}-${day}`;\n  const timeString = `T${hours}:${minutes}:${seconds}.${fractionalSeconds}Z`;\n  const fullDateString = `${dateString}${timeString}`;\n  return new FullDateInterface(fullDateString);\n}\n\n/**\r\n * Check the number of days for a picked month and year\r\n * algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\r\n *\r\n * @param {number} m\r\n * @param {number} y\r\n * @returns {number} number of days\r\n */\nfunction daysInMonth(m, y) {\n  // m is 0 indexed: 0-11\n  switch (m) {\n    case 2:\n      return y % 4 === 0 && y % 100 || y % 400 === 0 ? 29 : 28;\n\n    case 9:\n    case 4:\n    case 6:\n    case 11:\n      return 30;\n\n    default:\n      return 31;\n  }\n}\n/**\r\n * Check if the date is valid\r\n *\r\n * @param {number} d\r\n * @param {number} m\r\n * @param {number} y\r\n * @returns {boolean} boolean result\r\n */\n\n\nfunction isValidDate(d, m, y) {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n/**\r\n * Parses a DA formatted string into a Javascript object\r\n * @param {string} date a string in the DA VR format\r\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\r\n * @returns {DateInterface} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\r\n */\n\n\nfunction parseDA(date) {\n  if (date === undefined || date === null || date.length !== 8 || typeof date !== 'string') {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  const yyyy = parseInt(date.substring(0, 4), 10);\n  const mm = parseInt(date.substring(4, 6), 10);\n  const dd = parseInt(date.substring(6, 8), 10);\n\n  if (isValidDate(dd, mm, yyyy) !== true) {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  return {\n    year: yyyy,\n    month: mm,\n    day: dd\n  };\n}\n\n/**\r\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\r\n * @param {string} time - a string in the TM VR format\r\n * @returns {string} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\r\n */\nfunction parseTM(time) {\n  if (time === null || time === undefined || time.length < 2 || typeof time !== 'string') {\n    // must at least have HH\n    throw new Error(`invalid TM '${time}'`);\n  } // 0123456789\n  // HHMMSS.FFFFFF\n\n\n  const hh = parseInt(time.substring(0, 2), 10);\n  const mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n  const ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n  const fractionalStr = time.length >= 8 ? time.substring(7, 13) : undefined;\n  const ffffff = fractionalStr ? parseInt(fractionalStr, 10) * Math.pow(10, 6 - fractionalStr.length) : undefined;\n\n  if (isNaN(hh) || mm !== undefined && isNaN(mm) || ss !== undefined && isNaN(ss) || ffffff !== undefined && isNaN(ffffff) || hh < 0 || hh > 23 || mm && (mm < 0 || mm > 59) || ss && (ss < 0 || ss > 59) || ffffff && (ffffff < 0 || ffffff > 999999)) {\n    throw new Error(`invalid TM '${time}'`);\n  }\n\n  return {\n    hours: hh,\n    minutes: mm,\n    seconds: ss,\n    fractionalSeconds: ffffff\n  };\n}\n\n/**\r\n * Utility to create a FullDateInterface object given a string formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\r\n *\r\n * @export\r\n * @param {string} dateTime\r\n * @returns {FullDateInterface}\r\n */\n\nfunction dateTimeToFullDateInterface(dateTime) {\n  if (dateTime === undefined || dateTime === null) {\n    throw new Error('dateTimeToFullDateInterface : dateTime not defined.');\n  }\n\n  const date = parseDA(dateTime.substring(0, 8));\n  const time = parseTM(dateTime.substring(8));\n  return combineDateTime(date, time);\n}\n\n/**\r\n * Calculate the scan times\r\n *\r\n * @export\r\n * @param {InstanceMetadataForScanTimes[]} instances\r\n * @returns {FullDateInterface[]}\r\n */\n\nfunction calculateScanTimes(instances) {\n  const {\n    SeriesDate,\n    SeriesTime,\n    GEPrivatePostInjectionDateTime\n  } = instances[0];\n  const results = new Array(instances.length);\n  const seriesDate = parseDA(SeriesDate);\n  const seriesTime = parseTM(SeriesTime);\n  const seriesDateTime = combineDateTime(seriesDate, seriesTime);\n  let earliestAcquisitionDateTime = new FullDateInterface(`3000-01-01T00:00:00.000000Z`);\n  let timeError = earliestAcquisitionDateTime.getTimeInSec();\n  instances.forEach(instance => {\n    const {\n      AcquisitionDate,\n      AcquisitionTime\n    } = instance;\n    const acquisitionDate = parseDA(AcquisitionDate);\n    const acquisitionTime = parseTM(AcquisitionTime);\n    const acquisitionDateTime = combineDateTime(acquisitionDate, acquisitionTime);\n\n    if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n      earliestAcquisitionDateTime = acquisitionDateTime;\n    } else {\n      earliestAcquisitionDateTime = acquisitionDateTime.getTimeInSec() < earliestAcquisitionDateTime.getTimeInSec() ? acquisitionDateTime : earliestAcquisitionDateTime;\n    }\n  });\n\n  if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n    throw new Error('Earliest acquisition time or date could not be parsed.');\n  }\n\n  if (seriesDateTime.getTimeInSec() <= earliestAcquisitionDateTime.getTimeInSec()) {\n    return results.fill(seriesDateTime);\n  } else {\n    if (GEPrivatePostInjectionDateTime) {\n      // GE Private scan\n      return results.fill(dateTimeToFullDateInterface(GEPrivatePostInjectionDateTime));\n    } else {\n      /*const hasValidFrameTimes = instances.every(instance => {\r\n        return (\r\n          instance.FrameReferenceTime &&\r\n          instance.FrameReferenceTime > 0 &&\r\n          instance.ActualFrameDuration &&\r\n          instance.ActualFrameDuration > 0\r\n        );\r\n      });*/\n      // TODO: Temporarily commented out the checks and logic below to\n      // investigate the BQML_AC_DT_lessThan_S_DT_SIEMENS-instances case\n      //if (!hasValidFrameTimes) {\n      return results.fill(earliestAcquisitionDateTime); //}\n\n      /* Siemens PETsyngo\t3.x\tmulti-injection logic\r\n      - backcompute\tfrom\tcenter\t(average\tcount\trate\t)\tof\ttime\twindow\tfor\tbed\tposition\t(frame)\tin\tseries (reliable\tin\tall\tcases)\r\n      - Acquisition\tDate\t(0x0008,0x0022)\tand\tTime\t(0x0008,0x0032) are\tthe\tstart\tof\tthe\tbed\tposition\t(frame)\r\n      - Frame\tReference\tTime\t(0x0054,0x1300) is\tthe\toffset\t(ms)\tfrom\tthe\tscan\tDate\tand\tTime we\twant\tto\tthe\taverage\tcount\trate\ttime\r\n      */\n\n      /*return instances.map(instance => {\r\n        const {\r\n          FrameReferenceTime,\r\n          ActualFrameDuration,\r\n          RadionuclideHalfLife,\r\n          AcquisitionDate,\r\n          AcquisitionTime,\r\n        } = instance;\r\n        // Some of these checks are only here because the compiler is complaining\r\n        // We could potentially use the ! operator instead\r\n        if (!FrameReferenceTime || FrameReferenceTime <= 0) {\r\n          throw new Error(\r\n            `FrameReferenceTime is invalid: ${FrameReferenceTime}`\r\n          );\r\n        }\r\n               if (!ActualFrameDuration || ActualFrameDuration <= 0) {\r\n          throw new Error(\r\n            `ActualFrameDuration is invalid: ${ActualFrameDuration}`\r\n          );\r\n        }\r\n               if (!RadionuclideHalfLife) {\r\n          throw new Error('RadionuclideHalfLife is required');\r\n        }\r\n               if (!AcquisitionDate) {\r\n          throw new Error('AcquisitionDate is required');\r\n        }\r\n               if (!AcquisitionTime) {\r\n          throw new Error('AcquisitionTime is required');\r\n        }\r\n               const acquisitionDate: DateInterface = parseDA(AcquisitionDate);\r\n        const acquisitionTime: TimeInterface = parseTM(AcquisitionTime);\r\n        const acquisitionDateTime: FullDateInterface = combineDateTime(\r\n          acquisitionDate,\r\n          acquisitionTime\r\n        );\r\n               const frameDurationInSec = ActualFrameDuration / 1000;\r\n        const decayConstant = Math.log(2) / RadionuclideHalfLife;\r\n        const decayDuringFrame = decayConstant * frameDurationInSec;\r\n        // TODO: double check this is correctly copied from QIBA pseudocode\r\n        const averageCountRateTimeWithinFrameInSec =\r\n          (1 / decayConstant) *\r\n          Math.log(decayDuringFrame / (1 - Math.exp(-decayConstant)));\r\n        const scanDateTimeAsNumber =\r\n          Number(acquisitionDateTime) -\r\n          FrameReferenceTime / 1000 +\r\n          averageCountRateTimeWithinFrameInSec;\r\n               const scanDate = new Date(scanDateTimeAsNumber);\r\n        console.log('SIEMENS PATH');\r\n        console.log(new Date(scanDateTimeAsNumber));\r\n        return scanDate;\r\n      });*/\n    }\n  }\n}\n\nfunction calculateSUVlbmScalingFactor(inputs) {\n  const {\n    PatientSex,\n    PatientWeight,\n    PatientSize\n  } = inputs;\n  let LBM;\n  const bodyMassIndex = PatientWeight * PatientWeight / (PatientSize * PatientSize * 10000); // convert size in cm\n  // reference: https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n\n  if (PatientSex === 'F') {\n    LBM = 1.07 * PatientWeight - 148 * bodyMassIndex;\n  } else if (PatientSex === 'M') {\n    LBM = 1.1 * PatientWeight - 120 * bodyMassIndex;\n  } else {\n    throw new Error(`PatientSex is an invalid value: ${PatientSex}`);\n  }\n\n  return LBM * 1000; // convert in gr\n}\n\nfunction calculateSUVbsaScalingFactor(inputs) {\n  const {\n    PatientWeight,\n    PatientSize\n  } = inputs;\n  let BSA = Math.pow(PatientWeight, 0.425) * Math.pow(PatientSize * 100, 0.725) * 71.84;\n  return BSA;\n}\n\n/**\r\n * Calculate start time\r\n *\r\n * @export\r\n * @param {{\r\n *   RadiopharmaceuticalStartDateTime?: string;\r\n *   RadiopharmaceuticalStartTime?: string;\r\n *   SeriesDate?: string;\r\n * }} input\r\n * @returns {FullDateInterface}\r\n */\n\nfunction calculateStartTime(input) {\n  const {\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate\n  } = input;\n  let time;\n  let date;\n\n  if (RadiopharmaceuticalStartDateTime) {\n    return dateTimeToFullDateInterface(RadiopharmaceuticalStartDateTime);\n  } else if (RadiopharmaceuticalStartTime && SeriesDate) {\n    // start Date\tis not explicit - assume\tsame as\tSeries Date;\n    // but consider\tspanning midnight\n    // TODO: do we need some logic to check if the scan went over midnight?\n    time = parseTM(RadiopharmaceuticalStartTime);\n    date = parseDA(SeriesDate);\n    return combineDateTime(date, time);\n  }\n\n  throw new Error(`Invalid input: ${input}`);\n}\n\n/**\r\n * The injected dose used to calculate SUV is corrected for the\r\n * decay that occurs between the time of injection and the start of the scan\r\n *\r\n * @param {InstanceMetadata[]} instances\r\n * @returns {number[]}\r\n */\n\nfunction calculateDecayCorrection(instances) {\n  const {\n    RadionuclideTotalDose,\n    RadionuclideHalfLife,\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate\n  } = instances[0];\n\n  if (RadionuclideTotalDose === undefined || RadionuclideTotalDose === null) {\n    throw new Error('calculateDecayCorrection : RadionuclideTotalDose value not found.');\n  }\n\n  if (RadionuclideHalfLife === undefined || RadionuclideHalfLife === null) {\n    throw new Error('calculateDecayCorrection : RadionuclideHalfLife value not found.');\n  }\n\n  const scanTimes = calculateScanTimes(instances);\n  const startTime = calculateStartTime({\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate\n  });\n  return instances.map((_, index) => {\n    const scanTime = scanTimes[index];\n    const decayTimeInSec = scanTime.getTimeInSec() - startTime.getTimeInSec();\n\n    if (decayTimeInSec < 0) {\n      throw new Error('Decay time cannot be less than zero');\n    }\n\n    const decayedDose = RadionuclideTotalDose * Math.pow(2, -decayTimeInSec / RadionuclideHalfLife);\n    return 1 / decayedDose;\n  });\n}\n/**\r\n *\r\n * @param a Simple value or array of simple values\r\n * @param b Simple value or array of simple values\r\n * @returns boolean true if the values are equal.\r\n */\n\n\nconst deepEquals = (a, b) => {\n  return a === b || Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index]);\n};\n/**\r\n * Calculate the SUV factor\r\n *\r\n * Note: Rescale Slope / Intercept must still be applied. These must be applied\r\n *       on a per-Frame basis, since some scanners may have different values per Frame.\r\n *\r\n * @export\r\n * @param {InstanceMetadata[]} instances\r\n * @returns {ScalingFactorResult[]}\r\n */\n\n\nfunction calculateSUVScalingFactors(instances) {\n  const {\n    CorrectedImage,\n    Units,\n    PhilipsPETPrivateGroup,\n    PatientWeight,\n    PatientSex,\n    PatientSize\n  } = instances[0];\n\n  if (!CorrectedImage.includes('ATTN') || !CorrectedImage.includes('DECY')) {\n    throw new Error(`CorrectedImage must contain \"ATTN\" and \"DECY\": ${CorrectedImage}`);\n  } // Sanity check that every instance provided has identical\n  // values for series-level metadata. If not, the provided\n  // data is invalid.\n\n\n  const isSingleSeries = instances.every(instance => {\n    return instance.Units === Units && deepEquals(instance.CorrectedImage, CorrectedImage) && instance.PatientWeight === PatientWeight && instance.PatientSex === PatientSex && instance.PatientSize === PatientSize && instance.RadionuclideHalfLife === instances[0].RadionuclideHalfLife && instance.RadionuclideTotalDose === instances[0].RadionuclideTotalDose && instance.DecayCorrection === instances[0].DecayCorrection && instance.SeriesDate === instances[0].SeriesDate && instance.SeriesTime === instances[0].SeriesTime;\n  });\n\n  if (!isSingleSeries) {\n    throw new Error('The set of instances does not appear to come from one Series. Every instance must have identical values for series-level metadata properties');\n  }\n\n  if (PatientWeight === null || PatientWeight === undefined) {\n    throw new Error('PatientWeight value is missing. It is not possible to calculate the SUV factors');\n  }\n\n  let decayCorrectionArray = new Array(instances.length);\n  decayCorrectionArray = calculateDecayCorrection(instances);\n  let results = new Array(instances.length);\n  const weightInGrams = PatientWeight * 1000;\n\n  if (Units === 'BQML') {\n    results = decayCorrectionArray.map(function (value) {\n      return value * weightInGrams;\n    });\n  } else if (Units === 'CNTS') {\n    const hasValidSUVScaleFactor = instances.every(instance => {\n      var _instance$PhilipsPETP, _instance$PhilipsPETP2, _instance$PhilipsPETP3;\n\n      return instance.PhilipsPETPrivateGroup && ((_instance$PhilipsPETP = instance.PhilipsPETPrivateGroup) === null || _instance$PhilipsPETP === void 0 ? void 0 : _instance$PhilipsPETP.SUVScaleFactor) !== null && ((_instance$PhilipsPETP2 = instance.PhilipsPETPrivateGroup) === null || _instance$PhilipsPETP2 === void 0 ? void 0 : _instance$PhilipsPETP2.SUVScaleFactor) !== undefined && ((_instance$PhilipsPETP3 = instance.PhilipsPETPrivateGroup) === null || _instance$PhilipsPETP3 === void 0 ? void 0 : _instance$PhilipsPETP3.SUVScaleFactor) !== 0;\n    });\n    const hasValidActivityConcentrationScaleFactor = instances.every(instance => {\n      var _instance$PhilipsPETP4, _instance$PhilipsPETP5, _instance$PhilipsPETP6;\n\n      return instance.PhilipsPETPrivateGroup && !((_instance$PhilipsPETP4 = instance.PhilipsPETPrivateGroup) !== null && _instance$PhilipsPETP4 !== void 0 && _instance$PhilipsPETP4.SUVScaleFactor) && ((_instance$PhilipsPETP5 = instance.PhilipsPETPrivateGroup) === null || _instance$PhilipsPETP5 === void 0 ? void 0 : _instance$PhilipsPETP5.ActivityConcentrationScaleFactor) !== undefined && ((_instance$PhilipsPETP6 = instance.PhilipsPETPrivateGroup) === null || _instance$PhilipsPETP6 === void 0 ? void 0 : _instance$PhilipsPETP6.ActivityConcentrationScaleFactor) !== 0;\n    }); //console.log(`hasValidSUVScaleFactor: ${hasValidSUVScaleFactor}`);\n    //console.log(`hasValidActivityConcentrationScaleFactor: ${hasValidActivityConcentrationScaleFactor}`);\n\n    if (hasValidSUVScaleFactor) {\n      results = instances.map( // Added ! to tell Typescript that this can't be undefined, since we are testing it\n      // in the .every loop above.\n      instance => instance.PhilipsPETPrivateGroup.SUVScaleFactor);\n    } else if (hasValidActivityConcentrationScaleFactor) {\n      // if (0x7053,0x1000) not present, but (0x7053,0x1009) is present, then (0x7053,0x1009) * Rescale Slope,\n      // scales pixels to Bq/ml, and proceed as if Units are BQML\n      results = instances.map((instance, index) => {\n        // Added ! to tell Typescript that this can't be undefined, since we are testing it\n        // in the .every loop above.\n        return instance.PhilipsPETPrivateGroup.ActivityConcentrationScaleFactor * decayCorrectionArray[index] * weightInGrams;\n      });\n    } else {\n      throw new Error(`Units are in CNTS, but PhilipsPETPrivateGroup has invalid values: ${JSON.stringify(PhilipsPETPrivateGroup)}`);\n    }\n  } else if (Units === 'GML') {\n    // assumes that GML indicates SUVbw instead of SUVlbm\n    results.fill(1);\n  } else {\n    throw new Error(`Units has an invalid value: ${Units}`);\n  } // get BSA\n\n\n  let suvbsaFactor;\n\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn('PatientSize value is missing. It is not possible to calculate the SUV bsa factors');\n  } else {\n    const sulInputs = {\n      PatientWeight,\n      PatientSize\n    };\n    suvbsaFactor = calculateSUVbsaScalingFactor(sulInputs);\n  } // get LBM\n\n\n  let suvlbmFactor;\n\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn('PatientSize value is missing. It is not possible to calculate the SUV lbm factors');\n  } else if (PatientSex === null || PatientSex === undefined) {\n    console.warn('PatientSex value is missing. It is not possible to calculate the SUV lbm factors');\n  } else {\n    const suvlbmInputs = {\n      PatientWeight,\n      PatientSex,\n      PatientSize\n    };\n    suvlbmFactor = calculateSUVlbmScalingFactor(suvlbmInputs);\n  }\n\n  return results.map(function (result, index) {\n    const factors = {\n      suvbw: result\n    };\n\n    if (suvbsaFactor) {\n      // multiply for BSA\n      factors.suvbsa = decayCorrectionArray[index] * suvbsaFactor;\n    }\n\n    if (suvlbmFactor) {\n      // multiply for LBM\n      factors.suvlbm = decayCorrectionArray[index] * suvlbmFactor;\n    } // factor formulaes taken from:\n    // https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n\n\n    return factors;\n  });\n}\n\nexport { calculateSUVScalingFactors };\n//# sourceMappingURL=calculate-suv.esm.js.map\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var _this$props2 = this.props,\n          itemCount = _this$props2.itemCount,\n          layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          initialScrollOffset = _this$props3.initialScrollOffset,\n          layout = _this$props3.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n          direction = _this$props4.direction,\n          layout = _this$props4.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          className = _this$props5.className,\n          direction = _this$props5.direction,\n          height = _this$props5.height,\n          innerRef = _this$props5.innerRef,\n          innerElementType = _this$props5.innerElementType,\n          innerTagName = _this$props5.innerTagName,\n          itemCount = _this$props5.itemCount,\n          itemData = _this$props5.itemData,\n          _this$props5$itemKey = _this$props5.itemKey,\n          itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n          layout = _this$props5.layout,\n          outerElementType = _this$props5.outerElementType,\n          outerTagName = _this$props5.outerTagName,\n          style = _this$props5.style,\n          useIsScrolling = _this$props5.useIsScrolling,\n          width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n          itemCount = _this$props6.itemCount,\n          overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _excluded = [\"style\"],\n    _excluded2 = [\"style\"];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };\n//# sourceMappingURL=index.esm.js.map\n"],"names":["FullDateInterface","constructor","date","this","fullDate","getTimeInSec","dateString","substring","timeString","yyyy","parseInt","mm","length","undefined","dd","isNaN","Error","dateJS","Date","HH","MM","SS","fractionalStr","FFFFFF","Math","pow","timeInSec","getTime","getTimeInMicroSec","combineDateTime","time","hours","padStart","minutes","seconds","month","day","fractionalSeconds","padEnd","year","parseDA","d","m","y","daysInMonth","parseTM","hh","ss","ffffff","dateTimeToFullDateInterface","dateTime","calculateDecayCorrection","instances","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","SeriesDate","scanTimes","SeriesTime","GEPrivatePostInjectionDateTime","results","Array","seriesDateTime","earliestAcquisitionDateTime","timeError","forEach","instance","AcquisitionDate","AcquisitionTime","acquisitionDateTime","fill","calculateScanTimes","startTime","input","calculateStartTime","map","_","index","decayTimeInSec","deepEquals","a","b","isArray","every","val","calculateSUVScalingFactors","CorrectedImage","Units","PhilipsPETPrivateGroup","PatientWeight","PatientSex","PatientSize","includes","DecayCorrection","decayCorrectionArray","weightInGrams","value","hasValidSUVScaleFactor","_instance$PhilipsPETP","_instance$PhilipsPETP2","_instance$PhilipsPETP3","SUVScaleFactor","hasValidActivityConcentrationScaleFactor","_instance$PhilipsPETP4","_instance$PhilipsPETP5","_instance$PhilipsPETP6","ActivityConcentrationScaleFactor","JSON","stringify","suvbsaFactor","suvlbmFactor","console","warn","inputs","calculateSUVbsaScalingFactor","LBM","bodyMassIndex","calculateSUVlbmScalingFactor","result","factors","suvbw","suvbsa","suvlbm","now","performance","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","call","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey$1","data","createListComponent","_ref","_class","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_PureComponent","List","props","_this","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","state","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","_this$props","itemSize","layout","itemStyleCache","_getItemStyleCache","hasOwnProperty","_offset","isHorizontal","isRtl","offsetHorizontal","position","left","right","top","__","___","_onScrollHorizontal","event","_event$currentTarget","currentTarget","scrollWidth","setState","prevState","max","min","_resetIsScrollingDebounced","_onScrollVertical","_event$currentTarget2","clientHeight","scrollHeight","scrollTop","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps$1","_proto","prototype","scrollTo","scrollToItem","align","_this$props2","itemCount","scrollbarSize","componentDidMount","_this$props3","_callPropsCallbacks","componentDidUpdate","_this$props4","_this$state","componentWillUnmount","render","_this$props5","children","className","innerRef","innerElementType","innerTagName","itemData","_this$props5$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_this$_getRangeToRend","_getRangeToRender","startIndex","stopIndex","items","_index","push","key","estimatedTotalSize","WebkitOverflowScrolling","willChange","pointerEvents","_this$_getRangeToRend2","_overscanStartIndex","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_this$state2","_scrollDirection","_scrollOffset","_scrollUpdateWasRequested","_this$props6","overscanCount","_this$state3","overscanBackward","overscanForward","PureComponent","defaultProps","_ref2","_ref3","getItemMetadata$1","instanceProps","itemMetadataMap","lastMeasuredIndex","offset","itemMetadata","i","findNearestItemBinarySearch$1","high","low","middle","floor","currentOffset","findNearestItemExponentialSearch$1","interval","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","maxOffset","minOffset","round","findNearestItem$1","resetAfterIndex","shouldForceUpdate","forceUpdate","_ref5"],"sourceRoot":""}